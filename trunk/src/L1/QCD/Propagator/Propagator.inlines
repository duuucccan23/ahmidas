namespace QCD
{
  template< size_t L, size_t T >
  inline Propagator< L, T >::Propagator(Propagator< L, T > const &other)
  {
    std::copy(other.d_components, other.d_components + 12, d_components)
  }

  template< size_t L, size_t T >
  inline Propagator< L, T >::Propagator(Core::Field< Spinor, L, T > *data)
  {
    std::copy(data, data + 12, d_components);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_full Propagator< L, T >::begin()
  {
    return iterator_full(d_components, 1);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_full Propagator< L, T >::end()
  {
    return iterator_full(d_components + 12, 1);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_full Propagator< L, T >::begin() const
  {
    return const_iterator_full(d_components, 1);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_full Propagator< L, T >::end() const
  {
    return const_iterator_full(d_components + 12, 1);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_colour Propagator< L, T >::begin(Core::ColourIndex const index)
  {
    return iterator_colour(d_components + index, 4);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_colour Propagator< L, T >::end(Core::ColourIndex const index)
  {
    return iterator_colour(d_components + index + 12, 4);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_colour Propagator< L, T >::begin(Core::ColourIndex const index) const
  {
    return const_iterator_colour(d_components + index, 4);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_colour Propagator< L, T >::end(Core::ColourIndex const index) const
  {
    return const_iterator_colour(d_components + index + 12, 4);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_dirac Propagator< L, T >::begin(Core::DiracIndex const index)
  {
    return iterator_dirac(d_components + 3 * index, 1);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_dirac Propagator< L, T >::end(Core::DiracIndex const index)
  {
    return iterator_dirac(d_components + 3 * (index + 1), 1);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_dirac Propagator< L, T >::begin(Core::DiracIndex const index) const
  {
    return const_iterator_dirac(d_components + 3 * index, 1);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_dirac Propagator< L, T >::end(Core::DiracIndex const index) const
  {
    return const_iterator_dirac(d_components + 3 * (index + 1), 1);
  }

  template< size_t L, size_t T >
    inline Core::Field< Spinor, L, T > &Propagator< L, T >::operator[](size_t idx)
  {
    return d_components[idx];
  }

  template< size_t L, size_t T >
  inline Core::Field< Spinor, L, T > const &Propagator< L, T >::operator[](size_t idx) const
  {
    return d_components[idx];
  }

  template< size_t L, size_t T >
  inline Core::Field< Spinor, L, T > &Propagator< L, T >::operator()(Core::ColourIndex const colIdx, Core::DiracIndex const dirIdx)
  {
    return d_components[colIdx + 3 * dirIdx]
  }

  template< size_t L, size_t T >
  inline Core::Field< Spinor, L, T > const &Propagator< L, T >::operator()(Core::ColourIndex const colIdx, Core::DiracIndex const dirIdx) const
  {
    return d_components[colIdx + 3 * dirIdx]
  }
}
