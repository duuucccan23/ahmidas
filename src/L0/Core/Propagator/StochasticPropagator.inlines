template< size_t NComp >
inline StochasticPropagator< NComp >::StochasticPropagator(size_t const L, size_t const T)
  : Propagator(L, T)
{}

template< size_t NComp >
inline StochasticPropagator< NComp >::StochasticPropagator(StochasticPropagator< NComp > const &other)
 : Propagator(other)
{}

template< size_t NComp >
inline void StochasticPropagator< NComp >::isolate()
{
  if (*d_references == 1)
    return;

  assert(*d_references > 1);

  *d_references -= 1;
  d_references = new size_t(1);

  d_components = new Field< QCD::Tensor > (*d_components);
  (*d_components).isolate();
}

template< size_t NComp >
inline Propagator StochasticPropagator< NComp >::operator*(StochasticSource< NComp > const &sSource) const
{
  return sSource*(*this);
}

template< >
inline StochasticPropagator< 4 >::StochasticPropagator(Propagator const &other)
  : Propagator(other.L(), other.T())
{
  Propagator::const_iterator Iold = other.begin();
  Propagator::iterator Inew = begin();
  while(Inew != end())
  {
    (*Inew)[ 0] = (*Iold)[0];
    (*Inew)[ 1].setToZero();
    (*Inew)[ 2].setToZero();
    (*Inew)[ 3] = (*Iold)[3];
    (*Inew)[ 4].setToZero();
    (*Inew)[ 5].setToZero();
    (*Inew)[ 6] = (*Iold)[6];
    (*Inew)[ 7].setToZero();
    (*Inew)[ 8].setToZero();
    (*Inew)[ 9] = (*Iold)[9];
    (*Inew)[10].setToZero();
    (*Inew)[11].setToZero();
    ++Inew;
    ++Iold;
  }
}


template< >
inline StochasticPropagator< 1 >::StochasticPropagator(Propagator const &other)
  : Propagator(other.L(), other.T())
{
  Propagator::const_iterator Iold = other.begin();
  Propagator::iterator Inew = begin();
  while(Inew != end())
  {
    (*Inew)[ 0] = (*Iold)[0];
    (*Inew)[ 1].setToZero();
    (*Inew)[ 2].setToZero();
    (*Inew)[ 3].setToZero();
    (*Inew)[ 4].setToZero();
    (*Inew)[ 5].setToZero();
    (*Inew)[ 6].setToZero();
    (*Inew)[ 7].setToZero();
    (*Inew)[ 8].setToZero();
    (*Inew)[ 9].setToZero();
    (*Inew)[10].setToZero();
    (*Inew)[11].setToZero();
    ++Inew;
    ++Iold;
  }
}


template< >
inline Field< Dirac::Matrix > *StochasticPropagator< 4 >::operator*(StochasticPropagator< 4 > const &other) const
{
  assert (T()==other.T() && L()==other.L());
  Field< Dirac::Matrix > *field = new Field< Dirac::Matrix > (L(), T());

  Propagator::const_iterator Ia(begin());
  Propagator::const_iterator Ib(other.begin());

  Field< Dirac::Matrix >::iterator Ic(field->begin());

  while(Ia != end())
  {
    QCD::getSpinDilutedDiracMatrix((*Ic), (*Ia),(*Ib));
    ++Ia;
    ++Ib;
    ++Ic;
  }
  assert(Ia==end());
  assert(Ib==other.end());
  assert(Ic==field->end());
  return field;
}

template< >
inline Field< Dirac::Matrix > *StochasticPropagator< 1 >::operator*(StochasticPropagator< 1 > const &other) const
{
  assert (T()==other.T() && L()==other.L());
  Field< Dirac::Matrix > *field = new Field< Dirac::Matrix > (L(), T());

  Propagator::const_iterator Ia(begin());
  Propagator::const_iterator Ib(other.begin());

  Field< Dirac::Matrix >::iterator Ic(field->begin());

  while(Ia != end())
  {
    QCD::getUndilutedDiracMatrix((*Ic), (*Ia),(*Ib));
    ++Ia;
    ++Ib;
    ++Ic;
  }
  assert(Ia==end());
  assert(Ib==other.end());
  assert(Ic==field->end());
  return field;
}

template <>
inline StochasticPropagator< 4 > &StochasticPropagator< 4 >::dagger()
{
  StochasticPropagator<4>::iterator it = begin();
  isolate();
  while(it != end())
  {
    (*it) = QCD::Tensor((*it).spinDilutedDagger());
    ++it;
  }

  return *this;
}

template <>
inline StochasticPropagator< 4 > &StochasticPropagator< 4 >::revert()
{
  Dirac::Gamma<5> gamma5 = Dirac::Gamma<5>();
  isolate();
  StochasticPropagator<4>::iterator it = begin();
  while(it != end())
  {
      QCD::Tensor tmp((*it).spinDilutedDagger());
      tmp *= gamma5;
      (*it) = gamma5*tmp;
      ++it;
  }

  return *this;
}

template<>
inline StochasticPropagator< 4 > &StochasticPropagator< 4 >::conjugate()
{
  StochasticPropagator<4>::iterator it = begin();
  isolate();

    while(it != end())
    {
      (*it).spinDilutedConjugate();
      ++it;
    }

  return *this;
}

template <>
inline StochasticPropagator< 4 > &StochasticPropagator< 4 >::transpose()
{
  StochasticPropagator<4>::iterator it = begin();
  isolate();
  while(it != end())
  {
    (*it).spinDilutedTransposeFull();
    ++it;
  }

  return *this;
}

template <>
inline StochasticPropagator< 1 > &StochasticPropagator< 1 >::revert()
{
  Dirac::Gamma<5> gamma5 = Dirac::Gamma<5>();

  StochasticPropagator<1>::iterator it = begin();
  isolate();

  while(it != end())
    {
      (*it).undilutedConjugate();
      ++it;
    }

  (*this).rightMultiply(gamma5);

  return *this;
}

template <>
inline StochasticPropagator< 1 > &StochasticPropagator< 1 >::dagger()
{
  StochasticPropagator<1>::iterator it = begin();
  isolate();

  while(it != end())
    {
      (*it).undilutedConjugate();
      ++it;
    }

  return *this;
}

template< >
inline StochasticPropagator< 1 > &StochasticPropagator< 1 >::conjugate()
{
  StochasticPropagator< 1 >::iterator it = begin();
  isolate();

    while(it != end())
    {
      (*it).undilutedConjugate();
      ++it;
    }

  return *this;
}

template <>
inline StochasticPropagator< 1 > &StochasticPropagator< 1 >::transpose()
{
  return *this;
}



