namespace Core
{


  inline Propagator::Propagator(size_t L, size_t T, bool alloc)
    : d_references(new size_t(1)),
      colour_strides(new size_t[nColour]),
      dirac_strides(new size_t[nDirac])
  {

    colour_strides[0] = ColourStrideSink;
    colour_strides[1] = ColourStrideSource;
    dirac_strides[0]  = DiracStrideSink;
    dirac_strides[1]  = DiracStrideSource;

    if(alloc)
    {
      d_components = new Field< QCD::Tensor >(L, T);
    }
  }



  inline Propagator::Propagator(Propagator const &other)
    : d_components(other.d_components)
  {
    *d_references += 1;
  }


  inline Propagator::~Propagator()
  {
    destroy();
  }


  inline bool Propagator::loadILDG(std::vector< std::string > const filenames)
  {
    if (d_components == NULL)
    {
      std::cerr << "Error in void Propagator::loadILDG(std::vector< std::string > const filenames):" << std::endl;
      std::cerr << "memory for member Core::Field< QCD::Tensor > Propagator::d_components not allocated" << std::endl;
      return false;
    }

    if (filenames.size() == 12)
    {
      Core::Field< QCD::Spinor > tmp [12]=
      {
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
        Core::Field< QCD::Spinor > (d_components->L(), d_components->T())
      };
      for (size_t i=0; i<12; i++)
      {
        tmp[i] = Tool::IO::loadILDG< QCD::Spinor >(filenames[i], d_components->L(), d_components->T());
      }

      Core::Field< QCD::Tensor >::iterator itTensor = d_components->begin();
      Core::Field< QCD::Spinor >::iterator itsSpinor [12] =
      {
        tmp[ 0].begin(),tmp[ 1].begin(),tmp[ 2].begin(),
        tmp[ 3].begin(),tmp[ 4].begin(),tmp[ 5].begin(),
        tmp[ 6].begin(),tmp[ 7].begin(),tmp[ 8].begin(),
        tmp[ 9].begin(),tmp[10].begin(),tmp[11].begin()
      };

      QCD::Spinor *spinors[12];

      *spinors[ 0] = (*(++itsSpinor[ 0]));
      *spinors[ 1] = (*(++itsSpinor[ 1]));
      *spinors[ 2] = (*(++itsSpinor[ 2]));
      *spinors[ 3] = (*(++itsSpinor[ 3]));
      *spinors[ 4] = (*(++itsSpinor[ 4]));
      *spinors[ 5] = (*(++itsSpinor[ 5]));
      *spinors[ 6] = (*(++itsSpinor[ 6]));
      *spinors[ 7] = (*(++itsSpinor[ 7]));
      *spinors[ 8] = (*(++itsSpinor[ 8]));
      *spinors[ 9] = (*(++itsSpinor[ 9]));
      *spinors[10] = (*(++itsSpinor[10]));
      *spinors[11] = (*(++itsSpinor[11]));
      *(++itTensor) = QCD::Tensor(spinors);

      while (++itTensor != d_components->end())
      {
        *spinors[ 0] = (*(++itsSpinor[ 0]));
        *spinors[ 1] = (*(++itsSpinor[ 1]));
        *spinors[ 2] = (*(++itsSpinor[ 2]));
        *spinors[ 3] = (*(++itsSpinor[ 3]));
        *spinors[ 4] = (*(++itsSpinor[ 4]));
        *spinors[ 5] = (*(++itsSpinor[ 5]));
        *spinors[ 6] = (*(++itsSpinor[ 6]));
        *spinors[ 7] = (*(++itsSpinor[ 7]));
        *spinors[ 8] = (*(++itsSpinor[ 8]));
        *spinors[ 9] = (*(++itsSpinor[ 9]));
        *spinors[10] = (*(++itsSpinor[10]));
        *spinors[11] = (*(++itsSpinor[11]));
        *(itTensor) = QCD::Tensor(spinors);
      }
      return true;
    }
    else
    {
      std::cerr << "Error in void Propagator::loadILDG(std::vector< std::string > const filenames):" << std::endl;
      std::cerr << "filenames.size() should be 12" << std::endl;
      return false;
    }
  }


  inline Propagator::iterator Propagator::begin()
  {
    isolate();
    return iterator(*this, 0);
  }


  inline Propagator::iterator Propagator::end()
  {
    isolate();
    return iterator(*this, d_components->spatialSize());
  }


  inline size_t const Propagator::size() const
  {
    return d_size;
  }


}
