namespace Core
{
  template< typename Element, size_t L, size_t T >
  void Field< Element, L, T >::averageTimeSlice(std::complex< double > *result)
  {
    void *v_buffer = d_buffer;
    MPI::Attach_buffer(v_buffer, d_bufferSize);

    MPI::Op operator_plus;
    operator_plus.Init(plus, true /*commutes*/);

    for (size_t ctr = 0; ctr < d_grid.size(idx_T); ++ctr)
    {
      d_grid.timeSlice().Reduce(d_field + ctr * d_grid.localVolume(idx_T), result + ctr,
                                d_surfaces[idx_T], MPI::DOUBLE_COMPLEX, operator_plus, 0);
      if (d_grid.timeSlice.Get_rank() == 0)
        result[ctr] /= d_grid.localVolume(idx_T);
    }

    void *v_bufp = &v_buffer;
    MPI::Detach_buffer(v_bufp);
  }
}
