template< typename Element >
void Tool::IO::loadILDG(Core::Field< Element > *field, std::string const &filename)
{
  // Clear whatever was hanging around in memory. Now we can just use raw for the buffer!
  field->reset();
  
  // Open the file for reading with MPI.
  MPI_File fp;
  MPI_File_open(field->grid(), filename.cstr(), MPI_MODE_RDONLY, MPI_INFO_NULL, &fp)
  
  // Initialize a reader with the file pointer.
  LemonReader *reader = lemonCreateReader(&fp, field->grid());

  // Declare trackers for searching file
  bool binaryReadFlag = false;
  
  // Look for the relevant records
  while ((status = ReaderNextRecord(reader)) != LIME_EOF)
  {
    if (status != LIME_SUCCESS)
    {
      std::cerr << "ReaderNextRecord returned status " << status << std::endl;
      break;
    }
    char *header_type = ReaderType(reader);
    if (strcmp("ildg-binary-data", header_type) == 0)
    {
      // We'll need an integer dimension pointer, hence the array
      lemonReadLatticeParallel(reader, field->raw(), (MPI_Offset)sizeof(Element), {field->L(), field->L(), field->L(), field->T()});
      binaryReadFlag = true;
      close_reader_record(reader);
      continue;
    }
    close_reader_record(reader);
  }
  
  // Deal with the results of the parsing
  if (!gauge_read_flag)
    std::cerr << "Did not find a binary record in " << filename << std::endl;

  lemonDestroyReader(reader);
}