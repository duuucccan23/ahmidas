namespace Core
{

  /* private constructor */
  template< size_t L, size_t T >
  template< size_t Stride >
  inline Propagator< L, T >::iterator< Stride >::iterator(Core::Propagator< L, T > &target, size_t idx)
    : d_target(target), d_idx(idx)
  {}

  /* copy constructor */
  template< size_t L, size_t T >
  template< size_t Stride >
  inline Propagator< L, T >::iterator< Stride >::iterator(Propagator< L, T >::iterator< Stride > const &other)
    : d_target(other.d_target), d_idx(other.d_idx)
  {}

  template< size_t L, size_t T >
  template< size_t Stride >
  inline bool Propagator< L, T >::iterator< Stride >::operator==(Propagator< L, T >::iterator< Stride > const &other) const
  {
    return ((*(d_target.d_components))[d_idx] == (*(other.d_target.d_components))[other.d_idx]);
  }

  template< size_t L, size_t T >
  template< size_t Stride >
  inline bool Propagator< L, T >::iterator< Stride >::operator!=(Propagator< L, T >::iterator< Stride > const &other) const
  {
    return ((*(d_target.d_components))[d_idx] != (*(other.d_target.d_components))[other.d_idx]);
  }


  /* access field components */

  template< size_t L, size_t T >
  template< size_t Stride >
  inline Core::Field< std::complex< double >, L, T > &Propagator< L, T >::iterator< Stride >::operator*()
  {
    return (*(d_target.d_components))[d_idx];
  }

  template< size_t L, size_t T >
  template< size_t Stride >
  inline Core::Field< std::complex< double >, L, T > *Propagator< L, T >::iterator< Stride >::operator->()
  {
    return &((*(d_target.d_components))[d_idx]);
  }

  /* access field components  - "const" version */

  template< size_t L, size_t T >
  template< size_t Stride >
  inline Core::Field< std::complex< double >, L, T > const &Propagator< L, T >::iterator< Stride >::operator*() const
  {
    return (*(d_target.d_components))[d_idx];
  }

  template< size_t L, size_t T >
  template< size_t Stride >
  inline Core::Field< std::complex< double >, L, T > const *Propagator< L, T >::iterator< Stride >::operator->() const
  {
    return &((*(d_target.d_components))[d_idx]);
  }


  /* increment & decrement */

  template< size_t L, size_t T >
  template< size_t Stride >
  inline Propagator< L, T >::iterator< Stride > &Propagator< L, T >::iterator< Stride >::operator++()
  {
    d_idx += Stride;
    return *this;
  }

  template< size_t L, size_t T >
  template< size_t Stride >
  inline Propagator< L, T >::iterator< Stride > &Propagator< L, T >::iterator< Stride >::operator--()
  {
    d_idx -= Stride;
    return this;
  }

}
