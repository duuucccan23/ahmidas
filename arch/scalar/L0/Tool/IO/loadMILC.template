template< typename Element, size_t L, size_t T >
Core::Field< Element, L, T > Tool::IO::loadMILC(std::string const &filename)
{
  static_assert(sizeof(uint32_t) == sizeof(float), "Sizes of uint32_t and float are different.");

  std::ifstream input(filename.c_str());
  assert(input.good());

  MILCinfo info(input);

  Core::Field< Element, L, T > result;
  size_t const elemSize = sizeof(Element) / sizeof(double);
  uint32_t elem32[elemSize];

  // Scidac checksum is calculated, but ignored for the time being.
  Base::ScidacChecksum check;
  for (size_t ctr = 0; ctr < result.size(); ++ctr)
  {
    input.read(reinterpret_cast< char* >(elem32), elemSize * sizeof(uint32_t));
    if (!Base::bigEndian)
      Base::swapEndian(elem32, elem32 + elemSize, sizeof(uint32_t));
    std::copy(reinterpret_cast< float* >(elem32), reinterpret_cast< float* >(elem32) + elemSize,
              reinterpret_cast< double* >(result.raw()));
    check.blockAggregate(elem32, elemSize, 1, ctr);
  }
  return result;
}
