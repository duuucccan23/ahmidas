template< size_t Index >
Matrix Matrix::operator*(Gamma< Index > const &gamma) const
{
  Matrix out(*this);
  for (size_t itr = 0; itr < 16; itr++) 
    out.d_data[itr] *= gamma.sign(itr % 4);
  for (size_t itr = 0; itr < 3; itr++) {
    if (gamma.perm(itr) > itr) {
      for (size_t rowitr = 0; rowitr < 4; rowitr++)
        std::swap(*(out.d_data + 4 * rowitr + itr), *(out.d_data + 4 * rowitr + gamma.perm(itr)));
    }
  }
  return out;
}

template< size_t Index >
void Matrix::operator*=(Gamma< Index > const &gamma)
{
  for (size_t itr = 0; itr < 16; itr++) 
    this->d_data[itr] *= gamma.sign(itr%4);
  for (size_t itr = 0; itr < 3; itr++) {
    if (gamma.perm(itr) > itr) {
      for (size_t rowitr = 0; rowitr < 4; rowitr++)
        std::swap(*(this->d_data + 4 * rowitr + itr), *(this->d_data + 4 * rowitr + gamma.perm(itr)));
    }
  }
}

template< size_t Index >
Matrix operator*(Gamma< Index > const &gamma, Matrix const &mat)
{
  Matrix tmp;
  std::copy(mat.d_data   , mat.d_data+ 4, tmp.d_data+4*gamma.perm(0));
  std::copy(mat.d_data+ 4, mat.d_data+ 8, tmp.d_data+4*gamma.perm(1));
  std::copy(mat.d_data+ 8, mat.d_data+12, tmp.d_data+4*gamma.perm(2));
  std::copy(mat.d_data+12, mat.d_data+16, tmp.d_data+4*gamma.perm(3));
  std::transform(tmp.d_data   , tmp.d_data+ 4, tmp.d_data,
                  std::bind2nd(std::multiplies< std::complex< double > >(), gamma.sign(0)));
  std::transform(tmp.d_data+ 4, tmp.d_data+ 8, tmp.d_data+ 4,
                  std::bind2nd(std::multiplies< std::complex< double > >(), gamma.sign(1)));
  std::transform(tmp.d_data+ 8, tmp.d_data+12, tmp.d_data+ 8,
                  std::bind2nd(std::multiplies< std::complex< double > >(), gamma.sign(2)));
  std::transform(tmp.d_data+12, tmp.d_data+16, tmp.d_data+12,
                  std::bind2nd(std::multiplies< std::complex< double > >(), gamma.sign(3)));
  return tmp;
}
