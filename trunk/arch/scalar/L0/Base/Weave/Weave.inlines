namespace Base
{
  template< size_t L, size_t T >
  inline size_t Weave< L, T >::dim(Base::SpaceTimeIndex idx) const
  {
    return 1;
  }
  
  template< size_t L, size_t T >
  inline size_t Weave< L, T >::localSize(Base::SpaceTimeIndex idx) const
  {
    return (idx == Base::idx_T ? T : L);
  }

  template< size_t L, size_t T >
  inline size_t Weave< L, T >::localSurface(Base::SpaceTimeIndex idx) const
  {
    return d_surfaces[idx];
  }
  
  template< size_t L, size_t T >
  inline size_t Weave< L, T >::localVolume() const
  {
    return (L * L * L * T);
  }

  template< size_t L, size_t T >
  template< typename Element >
  inline void Weave< L, T>::fieldShift(Base::SpaceTimeIndex, Base::Direction, Element *, size_t const *) const
  {}

  template< size_t L, size_t T >
  inline size_t Weave< L, T >::globalCoordToLocalIndex(size_t *global) const
  {
    return (global[idx_X] * localSurface(idx_X) + global[idx_Y] * localSurface(idx_Y) + global[idx_Z] * localSurface(idx_Z));
  }

  template< size_t L, size_t T >
  template< typename Element >
  inline void Weave< L, T >::sumOverTimeSlices(Element *data) const
  {}
}
