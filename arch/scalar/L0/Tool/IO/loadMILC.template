template< typename Element >
Core::Field< Element > Tool::IO::loadMILC(std::string const &filename, size_t L, size_t T)
{
//  static_assert(sizeof(uint32_t) == sizeof(float), "Sizes of uint32_t and float are different.");

  std::ifstream input(filename.c_str());
  assert(input.good());

  MILCinfo info(input);

  Core::Field< Element > result(L, T);
  size_t const elemSize = sizeof(Element) / sizeof(double);
  uint32_t elem32[elemSize];

  Base::ScidacChecksum calc;
  for (size_t ctr = 0; ctr < result.volume(); ++ctr)
  {
    input.read(reinterpret_cast< char* >(elem32), elemSize * sizeof(uint32_t));
    if (!Base::bigEndian)
      Base::swapEndian(elem32, elem32 + elemSize, sizeof(uint32_t));
    std::copy(reinterpret_cast< float* >(elem32), reinterpret_cast< float* >(elem32) + elemSize,
              reinterpret_cast< double* >(result.raw() + ctr));
    calc.blockAggregate(elem32, elemSize, 1, ctr);
  }
  Base::ScidacChecksum read(info.checksum);

  std::cerr << "Checksums for file " << filename << '.' << std::endl;
  std::cerr << "Calculated: " << std::hex << calc.upper() << ' ' << calc.lower() << '.' << std::endl;
  std::cerr << "Read:       " << std::hex << read.upper() << ' ' << read.lower() << '.' << std::endl;
  return result;
}
