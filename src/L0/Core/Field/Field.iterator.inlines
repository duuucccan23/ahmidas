namespace Core
{
  template< typename Element >
  inline Field< Element >::iterator::iterator(Field< Element > &parent, size_t idx)
    : d_parent(parent), d_idx(idx)
  {}

  template< typename Element >
  inline Field< Element >::iterator::iterator(typename Field< Element >::iterator const &other)
    : d_parent(other.d_parent), d_idx(other.d_idx)
  {}

  template< typename Element >
  inline bool Field< Element >::iterator::operator==(iterator const &other) const
  {
    return ((&d_parent == &(other.d_parent)) && (d_idx == other.d_idx));
  }

  template< typename Element >
  inline bool Field< Element >::iterator::operator==(const_iterator const &other) const
  {
    return ((&d_parent == &(other.d_parent)) && (d_idx == other.d_idx));
  }

  template< typename Element >
  inline bool Field< Element >::iterator::operator!=(iterator const &other) const
  {
    return ((&d_parent != &(other.d_parent)) || (d_idx != other.d_idx));
  }

  template< typename Element >
  inline bool Field< Element >::iterator::operator!=(const_iterator const &other) const
  {
    return ((&d_parent != &(other.d_parent)) || (d_idx != other.d_idx));
  }

  template< typename Element >
  inline Element &Field< Element >::iterator::operator*()
  {
    return d_parent[d_idx];
  }

  template< typename Element >
  inline Element const &Field< Element >::iterator::operator*() const
  {
    return d_parent[d_idx];
  }

  template< typename Element >
  inline Element *Field< Element >::iterator::operator->()
  {
    return &d_parent[d_idx];
  }

  template< typename Element >
  inline Element const *Field< Element >::iterator::operator->() const
  {
    return &d_parent[d_idx];
  }

  template< typename Element >
  inline typename Field< Element >::iterator &Field< Element >::iterator::operator++()
  {
    ++d_idx;
    return *this;
  }

  template< typename Element >
  inline typename Field< Element >::iterator &Field< Element >::iterator::operator--()
  {
    --d_idx;
    return *this;
  }
}
