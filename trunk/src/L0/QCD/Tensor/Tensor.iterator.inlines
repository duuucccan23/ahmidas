namespace QCD
{

 /* private constructor */

  inline Tensor::iterator::iterator(Tensor &target, size_t stride, size_t idx)
    : d_target(target), d_stride(stride), d_idx(idx)
  {}

  /* copy constructor */

  inline Tensor::iterator::iterator(Tensor::iterator const &other)
    : d_target(other.d_target), d_idx(other.d_idx)
  {}

  inline bool Tensor::iterator::operator==(Tensor::iterator const &other) const
  {
    return (d_target.d_data)[d_idx] == (other.d_target.d_data)[other.d_idx];
  }

  inline bool Tensor::iterator::operator!=(Tensor::iterator const &other) const
  {
    return (d_target.d_data)[d_idx] != (other.d_target.d_data)[other.d_idx];
  }


  /* access field components */

  inline Spinor &Tensor::iterator::operator*()
  {
    return *(new Spinor(&(d_target.d_data)[d_idx]));
  }


  inline Spinor *Tensor::iterator::operator->()
  {
    return new Spinor(&(d_target.d_data)[d_idx]);
  }


  /* access field components  - "const" version */

  inline Spinor const &Tensor::iterator::operator*() const
  {
    return *(new Spinor(&(d_target.d_data)[d_idx]));
  }

  inline Spinor const *Tensor::iterator::operator->() const
  {
    return new Spinor(&(d_target.d_data)[d_idx]);
  }


  /* increment & decrement */

  inline Tensor::iterator &Tensor::iterator::operator++()
  {
    d_idx += d_stride;
    return *this;
  }


  inline Tensor::iterator &Tensor::iterator::operator--()
  {
    d_idx -= d_stride;
    return *this;
  }

}
