namespace Contraction
{
  template< size_t IndexSource, size_t IndexSink >
  void MesonLightLight< IndexSource, IndexSink >::contract(Core::Field< QCD::Spinor > const &source,
                                                           Core::Field< QCD::Spinor > const &sink)
  {
    Core::Field< QCD::Spinor >::iterator sourceItr = source.begin();
    Core::Field< QCD::Spinor >::iterator sinkItr = sink.begin();
    for (size_t ctr = 0; ctr < d_grid.volume(); ++sourceItr, ++sinkItr)
      d_buffer[ctr] = contractTwoPoint(Dirac::Gamma< IndexSink >(), *sinkItr,
                                          Dirac::Gamma< IndexSource >(), *sourceItr);
    gatherCorrelator();
  }

  template< size_t IndexSource, size_t IndexSink >
  void MesonLightLight< IndexSource, IndexSink >::gatherCorrelator()
  {
    std::complex< double > *fullCorrelator;
    if (d_grid.rank() == 0)
      fullCorrelator = new std::complex< double >[d_grid.latVolume()];

    d_grid.d_grid.Gather(d_correlator, d_grid.volume(), MPI::DOUBLE_COMPLEX,
                         fullCorrelator, d_grid.volume(), MPI::DOUBLE_COMPLEX);
  }
}
