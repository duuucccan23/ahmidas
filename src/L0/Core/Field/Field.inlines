namespace Core
{
  template< typename Element, size_t L, size_t T >
  inline Field< Element, L, T >::~Field()
  {
    destroy();
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::iterator Field< Element, L, T >::begin()
  {
    return iterator(*this, 0);
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::iterator Field< Element, L, T >::end()
  {
    return iterator(*this, d_com.localVolume());
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::const_iterator Field< Element, L, T >::begin() const
  {
    return const_iterator(*this, 0);
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::const_iterator Field< Element, L, T >::end() const
  {
    return const_iterator(*this, d_com.localVolume());
  }

  template< typename Element, size_t L, size_t T >
  template< typename Atom >
  inline Component< Element, L, T, Atom > Field< Element, L, T >::component(size_t idx)
  {
    return Component< Element, L, T, Atom >(*this, idx);
  }

  template< typename Element, size_t L, size_t T >
  inline Element &Field< Element, L, T >::operator[](size_t const idx)
  {
    return d_field[shiftIdxToOffset(idx)];
  }

  template< typename Element, size_t L, size_t T >
  inline Element const &Field< Element, L, T >::operator[](size_t const idx) const
  {
    return d_field[shiftIdxToOffset(idx)];
  }

  template< typename Element, size_t L, size_t T >
  inline Element &Field< Element, L, T >::getMemoryIndex(size_t const idx)
  {
    return d_field[idx];
  }

  template< typename Element, size_t L, size_t T >
  inline Element const &Field< Element, L, T >::getMemoryIndex(size_t const idx) const
  {
    return d_field[idx];
  }

  template< typename Element, size_t L, size_t T >
  inline size_t Field< Element, L, T >::shiftIdxToZero(size_t const idx) const
  {
    return ((idx % L)  + L - d_offsets[idx_Z]) % L +
           ((idx / L % L) + L - d_offsets[idx_Y]) % L * L +
           ((idx / (L * L) % L) + L - d_offsets[idx_X]) % L * L * L +
           ((idx / (L * L * L) + L - d_offsets[idx_T]) % L * L * L * L;
  }

  template< typename Element, size_t L, size_t T >
  inline size_t Field< Element, L, T >::shiftIdxToOffset(size_t const idx) const
  {
    return ((idx % L)  + d_offsets[idx_Z]) % L +
           ((idx / L % L) + d_offsets[idx_Y]) % L * L +
           ((idx / (L * L) % L) + d_offsets[idx_X]) % L * L * L +
           ((idx / (L * L * L) + d_offsets[idx_T]) % L * L * L * L;
  }
}
