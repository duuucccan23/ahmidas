namespace Core
{
  template< size_t L, size_t T >
  inline Propagator< L, T >::Propagator()
    : d_references(new size_t(1)), d_components(new Field< QCD::Spinor, L, T >*[12])
  {
    for (size_t idx = 0; idx < 12; ++idx)
      d_components[idx] = new Field< QCD::Spinor, L, T >();
  }
  
  template< size_t L, size_t T >
  inline Propagator< L, T >::Propagator(Propagator< L, T > const &other)
    : d_references(other.d_references), d_components(other.d_components)
  {
    *d_references += 1;
  }

  template< size_t L, size_t T >
  inline Propagator< L, T >::~Propagator()
  {
    destroy();
  }
  
  template< size_t L, size_t T >
  inline Core::Field< QCD::Spinor, L, T > &Propagator< L, T >::operator[](size_t const idx)
  {
    isolate();
    return *(d_components[idx]);
  }

  template< size_t L, size_t T >
  inline Core::Field< QCD::Spinor, L, T > const &Propagator< L, T >::operator[](size_t const idx) const
  {
    return *(d_components[idx]);
  }
  
  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_full Propagator< L, T >::begin()
  {
    isolate();
    return iterator_full(d_components);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_full Propagator< L, T >::end()
  {
    isolate();
    return iterator_full(d_components + 12);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_full Propagator< L, T >::begin() const
  {
    return const_iterator_full(d_components);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_full Propagator< L, T >::end() const
  {
    return const_iterator_full(d_components + 12);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_colour Propagator< L, T >::begin(Base::ColourIndex const index)
  {
    isolate();
    return iterator_colour(d_components + index);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_colour Propagator< L, T >::end(Base::ColourIndex const index)
  {
    isolate();
    return iterator_colour(d_components + index + 12);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_colour Propagator< L, T >::begin(Base::ColourIndex const index) const
  {
    return const_iterator_colour(d_components + index);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_colour Propagator< L, T >::end(Base::ColourIndex const index) const
  {
    return const_iterator_colour(d_components + index + 12);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_dirac Propagator< L, T >::begin(Base::DiracIndex const index)
  {
    isolate();
    return iterator_dirac(d_components + 3 * index);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::iterator_dirac Propagator< L, T >::end(Base::DiracIndex const index)
  {
    isolate();
    return iterator_dirac(d_components + 3 * (index + 1));
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_dirac Propagator< L, T >::begin(Base::DiracIndex const index) const
  {
    return const_iterator_dirac(d_components + 3 * index);
  }

  template< size_t L, size_t T >
  inline typename Propagator< L, T >::const_iterator_dirac Propagator< L, T >::end(Base::DiracIndex const index) const
  {
    return const_iterator_dirac(d_components + 3 * (index + 1));
  }

  template< size_t L, size_t T >
  inline size_t Propagator< L, T >::size() const
  {
    return 12;
  }

  template< size_t L, size_t T >
  inline Core::Field< QCD::Spinor, L, T > &Propagator< L, T >::operator()(Base::ColourIndex const colIdx, Base::DiracIndex const dirIdx)
  {
    isolate();
    return d_components[colIdx + 3 * dirIdx];
  }

  template< size_t L, size_t T >
  inline Core::Field< QCD::Spinor, L, T > const &Propagator< L, T >::operator()(Base::ColourIndex const colIdx, Base::DiracIndex const dirIdx) const
  {
    return d_components[colIdx + 3 * dirIdx];
  }
}
