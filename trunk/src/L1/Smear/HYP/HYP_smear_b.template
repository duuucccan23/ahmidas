namespace Smear
{
  template< size_t L, size_t T >
  void HYP::smear(Core::Field< QCD::Gauge, L, T > &field) const
  {
  /*
    Core::Field< SU3::Matrix, L, T > xHYP = Path::staple(field, Base::idx_Y, Base::dir_UP, Base::idx_X, Base::dir_UP);
    xHYP += Path::staple(field, Base::idx_Y, Base::dir_DOWN, Base::idx_X, Base::dir_UP);
    xHYP += Path::staple(field, Base::idx_Z, Base::dir_UP, Base::idx_X, Base::dir_UP);
    xHYP += Path::staple(field, Base::idx_Z, Base::dir_DOWN, Base::idx_X, Base::dir_UP);
    xHYP *= d_alpha;

    Core::Field< SU3::Matrix, L, T > yHYP = Path::staple(field, Base::idx_X, Base::dir_UP, Base::idx_Y, Base::dir_UP);
    yHYP += Path::staple(field, Base::idx_X, Base::dir_DOWN, Base::idx_Y, Base::dir_UP);
    yHYP += Path::staple(field, Base::idx_Z, Base::dir_UP, Base::idx_Y, Base::dir_UP);
    yHYP += Path::staple(field, Base::idx_Z, Base::dir_DOWN, Base::idx_Y, Base::dir_UP);
    yHYP *= d_alpha;
    
    Core::Field< SU3::Matrix, L, T > zHYP = Path::staple(field, Base::idx_X, Base::dir_UP, Base::idx_Z, Base::dir_UP);
    zHYP += Path::staple(field, Base::idx_X, Base::dir_DOWN, Base::idx_Z, Base::dir_UP);
    zHYP += Path::staple(field, Base::idx_Y, Base::dir_UP, Base::idx_Z, Base::dir_UP);
    zHYP += Path::staple(field, Base::idx_Y, Base::dir_DOWN, Base::idx_Z, Base::dir_UP);
    zHYP *= d_alpha;
    
    field.template component< SU3::Matrix >(Base::idx_X) += xHYP;
    field.template component< SU3::Matrix >(Base::idx_Y) += yHYP;
    field.template component< SU3::Matrix >(Base::idx_Z) += zHYP;
*/
    Tool::reunitarize(&field);
  }
}
