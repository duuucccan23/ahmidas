namespace Core
{
  template< typename Element, size_t L, size_t T >
  size_t Field< Element, L, T >::moveBufferToData(char *fileBuffer, size_t written, size_t precision)
  {
    if (!d_grid.bigEndian())
      swapEndian(d_field + written, d_field + written + d_grid.contiguousBlock(), precision);
    size_t elSize = sizeof(Element)/sizeof(double);
    if (precision == sizeof(float))
      std::copy(reinterpret_cast< float* >(fileBuffer), 
                reinterpret_cast< float* >(fileBuffer) + d_grid.contiguousBlock() * elSize,
                reinterpret_cast< double* >(d_field + written));
    else if (precision == sizeof(double))
      std::copy(reinterpret_cast< double* >(fileBuffer), 
                reinterpret_cast< double* >(fileBuffer) + d_grid.contiguousBlock() * elSize,
                reinterpret_cast< double* >(d_field + written));
    return (written + d_grid.contiguousBlock());
 }
}
