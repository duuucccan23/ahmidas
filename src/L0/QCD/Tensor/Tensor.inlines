namespace QCD
{
  inline std::complex< double > tr(Tensor const &tensor)
  {
    return tensor.trace();
  }
  
  inline std::complex< double > tr(hcTensor const &tensor)
  {
    return std::conj(tensor.dagger().trace());
  }
  
  inline Tensor::Tensor()
  {
    std::fill_n(d_data, 144, std::complex< double >(0.0, 0.0));
  }

  inline Tensor::Tensor(Tensor const &other)
  {
    std::copy(other.d_data, other.d_data + 144, d_data);
  }

  inline Tensor::Tensor(Spinor *data[12])
  {
    for (size_t ic=0; ic < 12; ic++)
      std::copy(reinterpret_cast< std::complex< double >* >(data[ic]),
                reinterpret_cast< std::complex< double >* >(data[ic]) + 12,
                &d_data[ic*12]);
  }

  inline Tensor::Tensor(std::complex< double > *data)
  {
    std::copy(data, data + 144, d_data);
  }

  inline std::complex< double > &Tensor::operator[](size_t const idx)
  {
    return d_data[idx];
  }

  inline std::complex< double > const &Tensor::operator[](size_t const idx) const
  {
    return d_data[idx];
  }
  
  inline std::complex< double > &Tensor::operator()(size_t dirSink, size_t colSink, size_t dirSource, size_t colSource)
  {
    return d_data[dirSink * 36 + colSink * 12 + dirSource * 4 + colSource];
  }
  
  inline std::complex< double > const &Tensor::operator()(size_t dirSink, size_t colSink, size_t dirSource, size_t colSource) const
  {
    return d_data[dirSink * 36 + colSink * 12 + dirSource * 4 + colSource];
  }

  inline hcTensor Tensor::dagger() const
  {
    return hcTensor(*this);
  }

  inline std::complex< double > Tensor::trace() const
  {
    return d_data[0] + d_data[13] + d_data[26] + d_data[39] + d_data[52] + d_data[65]
           + d_data[78] + d_data[91] + d_data[104] + d_data[117] + d_data[130] + d_data[143];
  }

  inline size_t Tensor::size() const
  {
    return 144;
  }

  inline Tensor::iterator Tensor::begin(Base::ColourIndex const idx, TensorColourStride const stride)
  {
    return iterator(*this, stride, 0);
  }


  inline Tensor::iterator Tensor::end(Base::ColourIndex const idx, TensorColourStride const stride)
  {
    return iterator(*this, stride, size());
  }


  inline Tensor::iterator Tensor::begin(Base::DiracIndex const idx, TensorDiracStride const stride)
  {
    return iterator(*this, stride, 0);
  }


  inline Tensor::iterator Tensor::end(Base::DiracIndex const idx, TensorDiracStride const stride)
  {
    return iterator(*this, stride ,size());
  }

  inline std::ostream &operator<<(std::ostream &out, Tensor const &tensor)
  {
    out <<  Spinor(tensor.d_data)       << Spinor(tensor.d_data +  12) << Spinor(tensor.d_data +  24);
    out <<  Spinor(tensor.d_data +  36) << Spinor(tensor.d_data +  48) << Spinor(tensor.d_data +  60);
    out <<  Spinor(tensor.d_data +  72) << Spinor(tensor.d_data +  84) << Spinor(tensor.d_data +  96);
    out <<  Spinor(tensor.d_data + 108) << Spinor(tensor.d_data + 120) << Spinor(tensor.d_data + 132) << std::endl;
    return out;
  }
}
