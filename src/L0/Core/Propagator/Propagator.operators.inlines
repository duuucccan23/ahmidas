template< size_t Index >
void Propagator::operator*=(Dirac::Gamma< Index > const &gamma)
{
  isolate();
  Propagator::iterator I(begin());
  while(I!=end())
  {
    (*I) *= gamma;
    ++I;
  }
}

template< size_t Index >
Propagator operator*(Dirac::Gamma< Index > const &gamma, Propagator const &p)
{
  Propagator tmp(p.L(), p.T());
  Propagator::const_iterator before(p.begin());
  Propagator::iterator after(tmp.begin());
  while(before != p.end())
  {
    (*after) = gamma*(*before);
    ++before;
    ++after;
  }
  return tmp;
}

template< size_t Index >
inline Propagator Propagator::operator*(Dirac::Gamma< Index > const &gamma) const
{
  Propagator tmp(*this);
  tmp*=gamma;
  return tmp;
}
