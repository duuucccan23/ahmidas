namespace Core
{
  template< typename Element, size_t L, size_t T >
  inline Field< Element, L, T >::~Field()
  {
    destroy();
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::iterator Field< Element, L, T >::begin()
  {
    return iterator(*this, 0);
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::iterator Field< Element, L, T >::end()
  {
    return iterator(*this, d_weave.localVolume());
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::const_iterator Field< Element, L, T >::begin() const
  {
    return const_iterator(*this, 0);
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::const_iterator Field< Element, L, T >::end() const
  {
    return const_iterator(*this, d_weave.localVolume());
  }

  template< typename Element, size_t L, size_t T >
  template< typename Atom >
  inline Component< Element, L, T, Atom > Field< Element, L, T >::component(size_t const idx)
  {
    return Component< Element, L, T, Atom >(*this, idx);
  }

  template< typename Element, size_t L, size_t T >
  inline Element &Field< Element, L, T >::operator[](size_t const idx)
  {
    return d_field[shiftIdxToOffset(idx)];
  }

  template< typename Element, size_t L, size_t T >
  inline Element const &Field< Element, L, T >::operator[](size_t const idx) const
  {
    return d_field[shiftIdxToOffset(idx)];
  }

  template< typename Element, size_t L, size_t T >
  inline Element &Field< Element, L, T >::getMemoryIndex(size_t const idx)
  {
    return d_field[idx];
  }

  template< typename Element, size_t L, size_t T >
  inline Element const &Field< Element, L, T >::getMemoryIndex(size_t const idx) const
  {
    return d_field[idx];
  }

  template< typename Element, size_t L, size_t T >
  inline size_t Field< Element, L, T >::shiftIdxToZero(size_t const idx) const
  {
    return ((idx                                     % d_weave.localSize(Base::idx_X)) + d_weave.localSize(Base::idx_X)
             - d_offsets[Base::idx_X]) % d_weave.localSize(Base::idx_X) +
        
           ((idx / d_weave.localSurface(Base::idx_Y) % d_weave.localSize(Base::idx_Y)) + d_weave.localSize(Base::idx_Y)
             - d_offsets[Base::idx_Y]) % d_weave.localSize(Base::idx_Y) * d_weave.localSurface(Base::idx_Y) +
        
           ((idx / d_weave.localSurface(Base::idx_Z) % d_weave.localSize(Base::idx_Z)) + d_weave.localSize(Base::idx_Z)
             - d_offsets[Base::idx_Z]) % d_weave.localSize(Base::idx_Z) * d_weave.localSurface(Base::idx_Z) +
        
           ((idx / d_weave.localSurface(Base::idx_T) % d_weave.localSize(Base::idx_T)) + d_weave.localSize(Base::idx_T)
             - d_offsets[Base::idx_T]) % d_weave.localSize(Base::idx_T) * d_weave.localSurface(Base::idx_T);
  }

  template< typename Element, size_t L, size_t T >
  inline size_t Field< Element, L, T >::shiftIdxToOffset(size_t const idx) const
  {
    return ((idx                                     % d_weave.localSize(Base::idx_X)) + d_offsets[Base::idx_X])
             % d_weave.localSize(Base::idx_X) +
        
           ((idx / d_weave.localSurface(Base::idx_Y) % d_weave.localSize(Base::idx_Y)) + d_offsets[Base::idx_Y])
             % d_weave.localSize(Base::idx_Y) * d_weave.localSurface(Base::idx_Y) +
        
           ((idx / d_weave.localSurface(Base::idx_Z) % d_weave.localSize(Base::idx_Z)) + d_offsets[Base::idx_Z])
             % d_weave.localSize(Base::idx_Z) * d_weave.localSurface(Base::idx_Z) +
        
           ( idx / d_weave.localSurface(Base::idx_T)                                   + d_offsets[Base::idx_T])
             % d_weave.localSize(Base::idx_T) * d_weave.localSurface(Base::idx_T);
  }
}
