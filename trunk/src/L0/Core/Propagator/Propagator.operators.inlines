namespace Core
{

  template< size_t Index >
  inline void Propagator::operator*=(Dirac::Gamma< Index > const &gamma)
  {
    isolate();
    Propagator::iterator I(begin());
    while(I!=end())
    {
      (*I) *= gamma;
      ++I;
    }
  }

  template< size_t Index >
  inline Propagator Propagator::operator*(Dirac::Gamma< Index > const &gamma) const
  {
    Propagator tmp(*this);
    tmp*=gamma;
    return tmp;
  }


  inline Field< QCD::reducedTensor > *Propagator::operator*(Propagator const &other) const
  {

    assert (T()==other.T() && L()==other.L());

    Field< QCD::reducedTensor > *field = new Field< QCD::reducedTensor > (L(), T());

    Propagator::const_iterator Ia(begin());
    Propagator::const_iterator Ib(other.begin());

    Field< QCD::reducedTensor >::iterator Ic(field->begin());

    while(Ia!=end())
    {
      (*Ic) = QCD::reducedTensor((*Ia),(*Ib));
      ++Ia;
      ++Ib;
      ++Ic;
    }
    assert(Ia==end() && Ib==other.end() && Ic==field->end());
    return field;
  }

}
