namespace Core
{
  template< typename Element, typename Atom >
  inline Component< Element, Atom >::Component(Field< Element > &parent, size_t const component)
    : d_parent(parent), d_component(component)
  {}

  template< typename Element, typename Atom >
  inline Atom &Component< Element, Atom >::getMemoryIndex(size_t const idx)
  {
    return d_parent.getMemoryIndex(idx)[d_component];
  }

  template< typename Element, typename Atom >
  inline Atom const &Component< Element, Atom >::getMemoryIndex(size_t const idx) const
  {
    return d_parent.getMemoryIndex(idx)[d_component];
  }

  template< typename Element, typename Atom >
  inline Atom &Component< Element, Atom >::operator[](size_t const idx)
  {
    return d_parent[idx][d_component];
  }

  template< typename Element, typename Atom >
  inline size_t Component< Element, Atom >::L() const
  {
    return d_parent.L();
  }

  template< typename Element, typename Atom >
  inline size_t Component< Element, Atom >::T() const
  {
    return d_parent.T();
  }

  template< typename Element, typename Atom >
  inline size_t Component< Element, Atom >::volume() const
  {
    return d_parent.volume();
  }

  template< typename Element, typename Atom >
  inline Atom const &Component< Element, Atom >::operator[](size_t const idx) const
  {
    return d_parent[idx][d_component];
  }

  template< typename Element, typename Atom >
  template< typename Scalar >
  inline void Component< Element, Atom >::leftMultiply(Scalar const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getMemoryIndex(idx).leftMultiply(other);
  }

  template< typename Element, typename Atom >
  template< typename OtherElement >
  inline void Component< Element, Atom >::leftMultiply(Field< OtherElement > const &field)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx).leftMultiply(field[idx]);
  }

  template< typename Element, typename Atom >
  template< typename OtherElement >
  inline void Component< Element, Atom >::leftMultiply(hcField< OtherElement > const &field)
  {
    Field< OtherElement > const &parent(field.dagger());
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx).leftMultiply(parent[idx].dagger());
  }

  template< typename Element, typename Atom >
  template< typename OtherElement, typename OtherAtom >
  void Component< Element, Atom >::leftMultiply(Component< OtherElement, OtherAtom > const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx).leftMultiply(other[idx]);
  }

  template< typename Element, typename Atom >
  template< typename Scalar >
  inline void Component< Element, Atom >::rightMultiply(Scalar const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getMemoryIndex(idx).rightMultiply(other);
  }

  template< typename Element, typename Atom >
  template< typename OtherElement >
  inline void Component< Element, Atom >::rightMultiply(Field< OtherElement > const &field)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx).rightMultiply(field[idx]);
  }

  template< typename Element, typename Atom >
  template< typename OtherElement >
  inline void Component< Element, Atom >::rightMultiply(hcField< OtherElement > const &field)
  {
    Field< OtherElement > const &parent(field.dagger());
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx).rightMultiply(parent[idx].dagger());
  }

  template< typename Element, typename Atom >
  template< typename OtherElement, typename OtherAtom  >
  inline void Component< Element, Atom >::rightMultiply(Component< OtherElement, OtherAtom > const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx).rightMultiply(other[idx]);
  }

  template< typename Element, typename Atom >
  template< typename Scalar >
  inline Component< Element, Atom > &Component< Element, Atom >::operator+=(Scalar const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getMemoryIndex(idx) += other;
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename OtherElement >
  inline Component< Element, Atom > &Component< Element, Atom >::operator+=(Field< OtherElement > const &field)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx) += field[idx];
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename OtherElement, typename OtherAtom  >
  inline Component< Element, Atom > &Component< Element, Atom >::operator+=(Component< OtherElement, OtherAtom > const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx) += other[idx];
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename Scalar >
  inline Component< Element, Atom > &Component< Element, Atom >::operator-=(Scalar const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getMemoryIndex(idx) -= other;
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename OtherElement >
  inline Component< Element, Atom > &Component< Element, Atom >::operator-=(Field< OtherElement > const &field)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx) -= field[idx];
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename OtherElement, typename OtherAtom  >
  inline Component< Element, Atom > &Component< Element, Atom >::operator-=(Component< OtherElement, OtherAtom > const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx) -= other[idx];
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename Scalar >
  inline Component< Element, Atom > &Component< Element, Atom >::operator*=(Scalar const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getMemoryIndex(idx) *= other;
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename OtherElement >
  inline Component< Element, Atom > &Component< Element, Atom >::operator*=(Field< OtherElement > const &field)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx) *= field[idx];
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename OtherElement, typename OtherAtom >
  inline Component< Element, Atom > &Component< Element, Atom >::operator*=(Component< OtherElement, OtherAtom > const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx) *= other[idx];
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename Scalar >
  inline Component< Element, Atom > &Component< Element, Atom >::operator/=(Scalar const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getMemoryIndex(idx) /= other;
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename OtherElement >
  inline Component< Element, Atom > &Component< Element, Atom >::operator/=(Field< OtherElement > const &field)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx) /= field[idx];
    return *this;
  }

  template< typename Element, typename Atom >
  template< typename OtherElement, typename OtherAtom >
  inline Component< Element, Atom > &Component< Element, Atom >::operator/=(Component< OtherElement, OtherAtom > const &other)
  {
    for (size_t idx = 0; idx < volume(); ++idx)
      getPhysicalIndex(idx) /= other[idx];
    return *this;
  }

  template< typename Element, typename Atom >
  inline hcComponent< Element, Atom > const Component< Element, Atom >::dagger() const
  {
    return hcComponent< Element, Atom >(*this);
  }

  template< typename Element, typename Atom >
  inline typename Component< Element, Atom >::const_iterator Component< Element, Atom >::begin() const
  {
    return const_iterator(d_parent.begin(), d_component);
  }

  template< typename Element, typename Atom >
  inline typename Component< Element, Atom >::const_iterator Component< Element, Atom >::end() const
  {
    return const_iterator(d_parent.end(), d_component);
  }

  template< typename Element, typename Atom >
  inline typename Component< Element, Atom >::iterator Component< Element, Atom >::begin()
  {
    return iterator(d_parent.begin(), d_component);
  }

  template< typename Element, typename Atom >
  inline typename Component< Element, Atom >::iterator Component< Element, Atom >::end()
  {
    return iterator(d_parent.end(), d_component);
  }

  template< typename Element, typename Atom >
  inline Atom &Component< Element, Atom >::getPhysicalIndex(size_t const idx)
  {
    return d_parent[idx][d_component];
  }

  template< typename Element, typename Atom >
  inline Atom const &Component< Element, Atom >::getPhysicalIndex(size_t const idx) const
  {
    return d_parent[idx][d_component];
  }
}
