namespace QCD
{

  template< size_t Index >
  inline reducedTensor reducedTensor::operator*(Dirac::Gamma< Index > const &gamma) const
  {
    reducedTensor tmp(*this);
    std::swap(tmp.d_data   , tmp.d_data+Dirac::Gamma< Index >::s_perm[0]);
    std::swap(tmp.d_data+ 1, tmp.d_data+Dirac::Gamma< Index >::s_perm[1]);
    std::swap(tmp.d_data+ 2, tmp.d_data+Dirac::Gamma< Index >::s_perm[2]);
    std::swap(tmp.d_data+ 3, tmp.d_data+Dirac::Gamma< Index >::s_perm[3]);
    std::swap(tmp.d_data+ 4, tmp.d_data+Dirac::Gamma< Index >::s_perm[0]);
    std::swap(tmp.d_data+ 5, tmp.d_data+Dirac::Gamma< Index >::s_perm[1]);
    std::swap(tmp.d_data+ 6, tmp.d_data+Dirac::Gamma< Index >::s_perm[2]);
    std::swap(tmp.d_data+ 7, tmp.d_data+Dirac::Gamma< Index >::s_perm[3]);
    std::swap(tmp.d_data+ 8, tmp.d_data+Dirac::Gamma< Index >::s_perm[0]);
    std::swap(tmp.d_data+ 9, tmp.d_data+Dirac::Gamma< Index >::s_perm[1]);
    std::swap(tmp.d_data+10, tmp.d_data+Dirac::Gamma< Index >::s_perm[2]);
    std::swap(tmp.d_data+11, tmp.d_data+Dirac::Gamma< Index >::s_perm[3]);
    std::swap(tmp.d_data+12, tmp.d_data+Dirac::Gamma< Index >::s_perm[0]);
    std::swap(tmp.d_data+13, tmp.d_data+Dirac::Gamma< Index >::s_perm[1]);
    std::swap(tmp.d_data+14, tmp.d_data+Dirac::Gamma< Index >::s_perm[2]);
    std::swap(tmp.d_data+15, tmp.d_data+Dirac::Gamma< Index >::s_perm[3]);
    tmp.d_data[ 0] *= Dirac::Gamma< Index >::s_sign[0];
    tmp.d_data[ 1] *= Dirac::Gamma< Index >::s_sign[1];
    tmp.d_data[ 2] *= Dirac::Gamma< Index >::s_sign[2];
    tmp.d_data[ 3] *= Dirac::Gamma< Index >::s_sign[3];
    tmp.d_data[ 4] *= Dirac::Gamma< Index >::s_sign[0];
    tmp.d_data[ 5] *= Dirac::Gamma< Index >::s_sign[1];
    tmp.d_data[ 6] *= Dirac::Gamma< Index >::s_sign[2];
    tmp.d_data[ 7] *= Dirac::Gamma< Index >::s_sign[3];
    tmp.d_data[ 8] *= Dirac::Gamma< Index >::s_sign[0];
    tmp.d_data[ 9] *= Dirac::Gamma< Index >::s_sign[1];
    tmp.d_data[10] *= Dirac::Gamma< Index >::s_sign[2];
    tmp.d_data[11] *= Dirac::Gamma< Index >::s_sign[3];
    tmp.d_data[12] *= Dirac::Gamma< Index >::s_sign[0];
    tmp.d_data[13] *= Dirac::Gamma< Index >::s_sign[1];
    tmp.d_data[14] *= Dirac::Gamma< Index >::s_sign[2];
    tmp.d_data[15] *= Dirac::Gamma< Index >::s_sign[3];
    return tmp;
  }


  // NOTE: specialization could speed up this routine
  template< size_t Index >
  inline void reducedTensor::operator*=(Dirac::Gamma< Index > const &gamma)
  {
    //std::complex<double> data[16];
    std::swap(d_data   , d_data+Dirac::Gamma< Index >::s_perm[0]);
    std::swap(d_data+ 1, d_data+Dirac::Gamma< Index >::s_perm[1]);
    std::swap(d_data+ 2, d_data+Dirac::Gamma< Index >::s_perm[2]);
    std::swap(d_data+ 3, d_data+Dirac::Gamma< Index >::s_perm[3]);
    std::swap(d_data+ 4, d_data+Dirac::Gamma< Index >::s_perm[0]);
    std::swap(d_data+ 5, d_data+Dirac::Gamma< Index >::s_perm[1]);
    std::swap(d_data+ 6, d_data+Dirac::Gamma< Index >::s_perm[2]);
    std::swap(d_data+ 7, d_data+Dirac::Gamma< Index >::s_perm[3]);
    std::swap(d_data+ 8, d_data+Dirac::Gamma< Index >::s_perm[0]);
    std::swap(d_data+ 9, d_data+Dirac::Gamma< Index >::s_perm[1]);
    std::swap(d_data+10, d_data+Dirac::Gamma< Index >::s_perm[2]);
    std::swap(d_data+11, d_data+Dirac::Gamma< Index >::s_perm[3]);
    std::swap(d_data+12, d_data+Dirac::Gamma< Index >::s_perm[0]);
    std::swap(d_data+13, d_data+Dirac::Gamma< Index >::s_perm[1]);
    std::swap(d_data+14, d_data+Dirac::Gamma< Index >::s_perm[2]);
    std::swap(d_data+15, d_data+Dirac::Gamma< Index >::s_perm[3]);
    d_data[ 0] *= Dirac::Gamma< Index >::s_sign[0];
    d_data[ 1] *= Dirac::Gamma< Index >::s_sign[1];
    d_data[ 2] *= Dirac::Gamma< Index >::s_sign[2];
    d_data[ 3] *= Dirac::Gamma< Index >::s_sign[3];
    d_data[ 4] *= Dirac::Gamma< Index >::s_sign[0];
    d_data[ 5] *= Dirac::Gamma< Index >::s_sign[1];
    d_data[ 6] *= Dirac::Gamma< Index >::s_sign[2];
    d_data[ 7] *= Dirac::Gamma< Index >::s_sign[3];
    d_data[ 8] *= Dirac::Gamma< Index >::s_sign[0];
    d_data[ 9] *= Dirac::Gamma< Index >::s_sign[1];
    d_data[10] *= Dirac::Gamma< Index >::s_sign[2];
    d_data[11] *= Dirac::Gamma< Index >::s_sign[3];
    d_data[12] *= Dirac::Gamma< Index >::s_sign[0];
    d_data[13] *= Dirac::Gamma< Index >::s_sign[1];
    d_data[14] *= Dirac::Gamma< Index >::s_sign[2];
    d_data[15] *= Dirac::Gamma< Index >::s_sign[3];

    //std::copy(data, data+16, d_data);
  }

  template< size_t Index >
  QCD::reducedTensor operator*(Dirac::Gamma< Index > const &gamma, reducedTensor const &rTensor)
  {
    reducedTensor tmp;
    std::copy(tmp.d_data   , tmp.d_data+ 4, rTensor.d_data+4*Dirac::Gamma< Index >::s_perm[0]);
    std::copy(tmp.d_data+ 4, tmp.d_data+ 8, rTensor.d_data+4*Dirac::Gamma< Index >::s_perm[1]);
    std::copy(tmp.d_data+ 8, tmp.d_data+12, rTensor.d_data+4*Dirac::Gamma< Index >::s_perm[2]);
    std::copy(tmp.d_data+12, tmp.d_data+16, rTensor.d_data+4*Dirac::Gamma< Index >::s_perm[3]);
    std::transform(tmp.d_data   , tmp.d_data+ 4, tmp.d_data,
                   std::bind2nd(std::multiplies< std::complex< double > >(), Dirac::Gamma< Index >::s_sign[0]));
    std::transform(tmp.d_data+ 4, tmp.d_data+ 8, tmp.d_data+ 4,
                   std::bind2nd(std::multiplies< std::complex< double > >(), Dirac::Gamma< Index >::s_sign[1]));
    std::transform(tmp.d_data+ 8, tmp.d_data+12, tmp.d_data+ 8,
                   std::bind2nd(std::multiplies< std::complex< double > >(), Dirac::Gamma< Index >::s_sign[2]));
    std::transform(tmp.d_data+12, tmp.d_data+16, tmp.d_data+12,
                   std::bind2nd(std::multiplies< std::complex< double > >(), Dirac::Gamma< Index >::s_sign[3]));
    return tmp;
  }

}
