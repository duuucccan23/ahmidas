template< typename Element, size_t L, size_t T >
void Tool::IO::saveScidac(Core::Field< Element, L, T > const &field, std::string const &filename)
{
  size_t const elements = sizeof(Element) / sizeof(double);
  Lime::Writer writer(filename);

  writer.newRecord("scidac-binary-data");

  float buffer[elements];
  for (size_t siteIdx = 0; siteIdx < field.size(); ++siteIdx)
  {
    std::copy(reinterpret_cast< double const* >(&(field.constPhysicalIndex(siteIdx))), reinterpret_cast< double const* >(&(field.constPhysicalIndex(siteIdx))) + elements, buffer);
    if (!Base::bigEndian)
      swapEndian(buffer, buffer + elements, sizeof(float));
    writer.write(buffer, elements);
  }
}
