#include "Field.h"
#include "lime.h"

/* Note:
 * Required version of lime: >= 1.2.3
 * n_uint64_t is a lime defined type!!
 */
namespace Core
{
  template< typename Element, size_t T, size_t L >
  void Core::Field< Element, T, L >::readFromFile(char const* fileName) 
  {
    FILE *ifs=fopen(fileName, "r");
    int status;
    n_uint64_t bytes;
    char * header_type;
    LimeReader * limereader;
    double tmp2[72];
    if(ifs == (FILE *)NULL) {
      fprintf(stderr, "Could not open file %s\n Aborting...\n", fileName);
      exit(500);
    }
    limereader = limeCreateReader( ifs );
    if( limereader == (LimeReader *)NULL ) {
      fprintf(stderr, "Unable to open LimeReader\n");
      exit(500);
    }
    while( (status = limeReaderNextRecord(limereader)) != LIME_EOF ) {
      if(status != LIME_SUCCESS ) {
        fprintf(stderr, "limeReaderNextRecord returned error with status = %d!\n", status);
        status = LIME_EOF;
        break;
      }
      header_type = limeReaderType(limereader);
      if(!strcmp("ildg-binary-data",header_type)) break;
    }
    if(status == LIME_EOF) {
      fprintf(stderr, "no ildg-binary-data record found in file %s\n",fileName);
      limeDestroyReader(limereader);
      fclose(ifs);
      exit(-2);
    }
    bytes = limeReaderBytes(limereader);
    if((int)bytes != L * L * L * T * 72 * sizeof(double)) {
      fprintf(stderr, "Probably wrong lattice size or precision (bytes=%d) in file %s\n", (int)bytes, fileName);
      fprintf(stderr, "Aborting...!\n");
      fflush( stdout );
      exit(501);
    }
  
    bytes = (n_uint64_t)72 * sizeof(double);
  
    for(size_t t = 0; t < T; ++t) {
      for(size_t x = 0; x < L; ++x) {
        for(size_t y = 0; y < L; ++y) {
          for(size_t z = 0; z < L; ++z) {
            int p = (((t * L + x) * L + y) * L + z) * 12;
            status = limeReaderReadData(tmp2, &bytes, limereader);
            if(!big_endian())
              swapEndian(tmp2, tmp2 + 72);
            int k =0;
            //ILDG has mu-order: x,y,z,t
            for(int mu = 1; mu < 4; ++mu) {
              for(int i = 0; i < 3; ++i) {
                for(int j = 0; j < 3; ++j) {
                  // config (p+mu*3+i, j) = complex<double> (tmp2[2*k], tmp2[2*k+1]);
  
                  int index = ((p + mu * 3 + i) * 3 + j) * 2;
                  d_field[index  ] = tmp2[2 * k]; ///NO WAY
                  d_field[index+1] = tmp2[2 * k + 1]; ///NO WAY
  
                  k++;
                }
              }
            }
            for(int i = 0; i < 3; ++i) {
              for(int j = 0; j < 3; ++j) {
                // config (p+i, j) = complex<double> (tmp2[2*k], tmp2[2*k+1]);
  
                int index = ((p + i) * 3 + j) * 2;
                d_field[index  ] = tmp2[2 * k]; ///NO WAY
                d_field[index+1] = tmp2[2 * k + 1]; ///NO WAY
                ++k;
              }
            }
            if(status < 0 && status != LIME_EOR) {
              fprintf(stderr, "LIME read error occured with status = %d while reading file %s!\n Aborting...\n", 
                      status, fileName);
              exit(500);
            }
          }
        }
      }
    }
    limeDestroyReader(limereader);
    fclose(ifs);
    return(0);
  }
}
