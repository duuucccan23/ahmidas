inline Propagator::Propagator(size_t L, size_t T, bool alloc)
  : d_references(new size_t(1))
{
  if(alloc)
    d_components = new Field< QCD::Tensor >(L, T);
}

inline Propagator::Propagator(Propagator const &other)
  : d_references(other.d_references),
    d_components(other.d_components)
{
  *d_references += 1;
}

inline Propagator::~Propagator()
{
  destroy();
}

inline void Propagator::destroy()
{
  *d_references -= 1;
  if (*d_references == 0)
  {
    delete d_references;
    delete d_components;
  }
}

inline QCD::Tensor const &Propagator::operator[](size_t const localIndex) const
{
  return (*d_components)[localIndex];
}

inline QCD::Tensor &Propagator::operator[](size_t const localIndex)
{
  isolate();
  return (*d_components)[localIndex];
}

template < size_t Index >
inline void Propagator::rightMultiply(Dirac::Gamma< Index > const& gamma)
{
  isolate();
  Propagator::iterator it = begin();
  while(it != end())
  {
    (*it).rightMultiply(gamma);
    ++it;
  }
}


inline Propagator &Propagator::dagger()
{
  isolate();
  Propagator::iterator it = begin();
  while(it != end())
  {
    (*it) = QCD::Tensor((*it).dagger());
    ++it;
  }
  return *this;
}

inline Propagator &Propagator::conjugate()
{
  isolate();
  Propagator::iterator it = begin();
  while(it != end())
  {
    (*it).conjugate();
    ++it;
  }
  return *this;
}

inline Propagator &Propagator::transpose()
{
  isolate();
  Propagator::iterator it = begin();
  while(it != end())
  {
    (*it).transposeFull();
    ++it;
  }
  return *this;
}

inline void Propagator::setToRandom()
{
  isolate();
  Propagator::iterator it = begin();
  while(it != end())
  {
    (*it).setToRandom();
    ++it;
  }
}

inline Propagator::iterator Propagator::begin()
{
  isolate();
  return iterator(*this, 0);
}

inline Propagator::const_iterator Propagator::begin() const
{
  return const_iterator(*this, 0);
}

inline Propagator::iterator Propagator::end()
{
  isolate();
  return iterator(*this, d_components->size());
}

inline Propagator::const_iterator Propagator::end() const
{
  return const_iterator(*this, d_components->size());
}

inline size_t const Propagator::size() const
{
  return d_size;
}

inline size_t const Propagator::L() const
{
  return d_components->L();
}

inline size_t const Propagator::T() const
{
  return d_components->T();
}

inline std::ostream &operator<<(std::ostream &out, Propagator const &p)
{
  Propagator::const_iterator I(p.begin());
  while (I != p.end())
  {
    out << (*I) << std::endl;
    ++I;
  }
  return out;
}
