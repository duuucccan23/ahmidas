template< typename Element, size_t L, size_t T >
void Base::IO::saveScidac(Core::Field< Element, L, T > const &field, std::string const &filename)
{
  Lime::Writer writer(filename);

  writer.newRecord("scidac-binary-data");

  //Create a temporary field to write?
  //First the ugly way:
  size_t elements = L * L * L * T * sizeof(Element) / sizeof(double);
  float *writefield = new float[elements];
  for(size_t iter = 0; iter < elements; ++iter)
    writefield[iter] = *(reinterpret_cast< double*>(field.d_field) + iter);

  if (!bigEndian())
    swapEndian(writefield, writefield + elements, sizeof(float));
  writer.write(writefield, elements);
  delete[] writefield;

}
