namespace Smear
{
  template< size_t L, size_t T >
  void Jacobi::smear(Core::Field< QCD::Spinor, L, T > *spinorField, Core::Field< QCD::Gauge, L, T > &gaugeField) const
  {
    // We need some copies to be able to 'reset' the spinor field.
    // NOTE There seems to be ample room for optimization here, avoiding some copies probably.
    Core::Field< QCD::Spinor, L, T > neighbourSpinor(*spinorField);
    (*spinorField) *= d_weight;
    neighbourSpinor *= d_kappa;
    Core::Field< QCD::Spinor, L, T > shiftingSpinor(neighbourSpinor);

    // Do the forward factors
    shiftingSpinor.shift(Base::idx_X, Base::dir_DOWN);
    shiftingSpinor.leftMultiply(gaugeField.component(Base::idx_X));
    (*spinorField) += shiftingSpinor;
      
    shiftingSpinor = neighbourSpinor;
    shiftingSpinor.shift(Base::idx_Y, Base::dir_DOWN);
    shiftingSpinor.leftMultiply(gaugeField.component(Base::idx_Y));
    (*spinorField) += shiftingSpinor;

    shiftingSpinor = neighbourSpinor;
    shiftingSpinor.shift(Base::idx_Z, Base::dir_DOWN);
    shiftingSpinor.leftMultiply(gaugeField.component(Base::idx_Z));
    (*spinorField) += shiftedSpinor;
    
    // We now calculate the backwards gauge part
    shiftingSpinor = neighbourSpinor;
    shiftingSpinor.leftMultiply(gaugeField.component(Base::idx_X).dagger());
    shiftingSpinor.shift(Base::idx_X, Base::dir_UP);
    (*spinorField) += shiftedSpinor;
      
    shiftingSpinor = neighbourSpinor;
    shiftingSpinor.leftMultiply(gaugeField.component(Base::idx_Y).dagger());
    shiftingSpinor.shift(Base::idx_Y, Base::dir_UP);
    (*spinorField) += shiftedSpinor;

    neighbourSpinor.leftMultiply(gaugeField.component(Base::idx_Z).dagger());
    neighbourSpinor.shift(Base::idx_Z, Base::dir_UP);
    (*spinorField) += neighbourSpinor;
  }
}
