namespace Core
{

  template <>
  inline Propagator::Propagator(StochasticPropagator< 4 > const &sProp)
    : d_references(new size_t(1)), d_components = new Field< QCD::Tensor >(sProp.L(), sProp.T())
  {

    Core::Field< QCD::Spinor >::const_iterator i0((sProp.d_components[0]).begin());
    Core::Field< QCD::Spinor >::const_iterator i1((sProp.d_components[1]).begin());
    Core::Field< QCD::Spinor >::const_iterator i2((sProp.d_components[2]).begin());
    Core::Field< QCD::Spinor >::const_iterator i3((sProp.d_components[3]).begin());


      Core::Field< QCD::Tensor >::iterator itTensor = d_components->begin();
      Core::Field< QCD::Spinor >::iterator itsSpinor [12] =
      {
        tmp[ 0].begin(),tmp[ 1].begin(),tmp[ 2].begin(),
        tmp[ 3].begin(),tmp[ 4].begin(),tmp[ 5].begin(),
        tmp[ 6].begin(),tmp[ 7].begin(),tmp[ 8].begin(),
        tmp[ 9].begin(),tmp[10].begin(),tmp[11].begin()
      };

      QCD::Spinor **spinors = new QCD::Spinor *[12];
      for (size_t i=0; i<12; i++)
        spinors[i] = NULL;

      // would like to see for loop here
      // but postfix Field::iterator operator++(int) is not implemented yet
      do
      {
        for (size_t i=0; i<12; i++)
        {
          spinors[i] = new QCD::Spinor(*(itsSpinor[i]));
          //std::cout << *(spinors[i]) << std::endl;
          ++(itsSpinor[i]);
        }
        *(itTensor) = QCD::Tensor(spinors);
        for (size_t i=0; i<12; i++)
        {
          delete spinors[i];
        }
      }
      while (++itTensor != d_components->end());
   }
}
