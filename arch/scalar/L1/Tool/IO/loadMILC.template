template< typename Element >
void Tool::IO::loadMILC(Core::Field< Element > *field, std::string const &filename)
{
  std::ifstream input(filename.c_str());
  assert(input.good());

  MILCinfo info(input);
  Tool::ScidacChecksum read(info.checksum);

  size_t const elemSize = sizeof(Element) / sizeof(double);
  uint32_t *raw = new uint32_t[field->volume() * elemSize];

  input.read(reinterpret_cast< char* >(raw), field->volume() * elemSize * sizeof(uint32_t));
  Tool::reunitarize(field);
  Tool::ScidacChecksum calc;
  calc.blockAggregate(raw, elemSize, field->volume());
  std::cerr << "Checksums for file " << filename << '.' << std::endl;
  std::cerr << "Calculated: " << std::hex << calc.upper() << ' ' << calc.lower() << '.' << std::endl;
  std::cerr << "Read:       " << std::hex << read.upper() << ' ' << read.lower() << '.' << std::endl;

  if (!Base::bigEndian)
    Base::swapEndian(raw, raw + field->volume() * elemSize, sizeof(uint32_t));
  std::copy(reinterpret_cast< float* >(raw), reinterpret_cast< float* >(raw) + field->volume() * elemSize,
            reinterpret_cast< double* >(field->raw()));

  delete[] raw;
}
