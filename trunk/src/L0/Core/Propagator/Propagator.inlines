namespace Core
{


  inline Propagator::Propagator(size_t L, size_t T, bool alloc)
    : d_references(new size_t(1)),
      colour_strides(new size_t[nColour]),
      dirac_strides(new size_t[nDirac])
  {

    colour_strides[0] = ColourStrideSink;
    colour_strides[1] = ColourStrideSource;
    dirac_strides[0]  = DiracStrideSink;
    dirac_strides[1]  = DiracStrideSource;

    if(alloc)
    {
      d_components = new Field< QCD::Tensor >(L, T);
    }
  }



  inline Propagator::Propagator(Propagator const &other)
    : d_components(other.d_components)
  {
    *d_references += 1;
  }


  inline Propagator::~Propagator()
  {
    destroy();
  }


  inline bool Propagator::loadILDG(std::vector< std::string > const filenames)
  {
    if (d_components == NULL)
    {
      std::cerr << "Error in void Propagator::loadILDG(std::vector< std::string > const filenames):" << std::endl;
      std::cerr << "memory for member Core::Field< QCD::Tensor > Propagator::d_components not allocated" << std::endl;
      return false;
    }

    if (filenames.size() == 12)
    {
//       Core::Field< QCD::Spinor > * tmp = 
//       {
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T()),
//         Core::Field< QCD::Spinor > (d_components->L(), d_components->T())
//       };
//       for (size_t i=0; i<filenames.size(); i++)
//       {
//         tmp[i] = Tool::IO::loadILDG< QCD::Spinor >(filenames[i]);
//       }
//       
//       Core::Field< QCD::Tensor >::iterator itTensor = d_components->begin();
//       Core::Field< QCD::Spinor >::iterator itsSpinor = 
//       {
//           tmp[ 0].begin(),tmp[ 1].begin(),tmp[ 2].begin(),
//           tmp[ 3].begin(),tmp[ 4].begin(),tmp[ 5].begin(),
//           tmp[ 6].begin(),tmp[ 7].begin(),tmp[ 8].begin(),
//           tmp[ 9].begin(),tmp[10].begin(),tmp[11].begin()
//       };
//             
//       QCD::Spinor spinors [12];
//       while (itTensor != d_components->end())
//       {
//         spinors =       
//         {
//           tmp[ 0].++,tmp[ 1].++,tmp[ 2].++,
//           tmp[ 3].++,tmp[ 4].++,tmp[ 5].++,
//           tmp[ 6].++,tmp[ 7].++,tmp[ 8].++,
//           tmp[ 9].++,tmp[10].++,tmp[11].++
//         };
//         *(itTensor++) = QCD::Tensor(spinors);
//       }
      
      return true;
    }
    else
    {
      std::cerr << "Error in void Propagator::loadILDG(std::vector< std::string > const filenames):" << std::endl;
      std::cerr << "filenames.size() should be 12" << std::endl;
      return false;
    }
  }


  inline Propagator::iterator Propagator::begin()
  {
    isolate();
    return iterator(*this, 0);
  }


  inline Propagator::iterator Propagator::end()
  {
    isolate();
    return iterator(*this, d_components->spatialSize());
  }


  inline size_t const Propagator::size() const
  {
    return d_size;
  }


}