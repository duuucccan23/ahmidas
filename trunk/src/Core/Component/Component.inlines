namespace Core
{
  template< typename Element, size_t L, size_t T, typename Atom >
  inline Component< Element, L, T, Atom >::Component(Field< Element, L, T > &parent, Core::SpaceTimeIndex component)
    : d_parent(parent), d_component(component)
  {}

  template< typename Element, size_t L, size_t T, typename Atom >
  inline Atom& Component< Element, L, T, Atom >::element(SpaceTimeIndex const *idx)
  {
    return d_parent.element(idx)[d_component];
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename Scalar >
  inline void Component< Element, L, T, Atom >::leftMultiply(Scalar const &scalar)
  {
    for (iterator iter = begin(); iter != end(); ++iter)
      iter->leftMultiply(scalar);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement >
  inline void Component< Element, L, T, Atom >::leftMultiply(Field< OtherElement, L, T > const &field)
  {
    typename Field< OtherElement, L, T >::iterator fIter = field.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++fIter)
      iter->leftMultiply(*fIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement, typename OtherAtom  >
  void Component< Element, L, T, Atom >::leftMultiply(Component< OtherElement, L, T, OtherAtom > const &other)
  {
    typename Component< OtherElement, L, T, OtherAtom >::iterator cIter = other.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++cIter)
      iter->leftMultiply(*cIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename Scalar >
  inline void Component< Element, L, T, Atom >::rightMultiply(Scalar const &scalar)
  {
    for (iterator iter = begin(); iter != end(); ++iter)
      iter->rightMultiply(scalar);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement >
  inline void Component< Element, L, T, Atom >::rightMultiply(Field< OtherElement, L, T > const &field)
  {
    typename Field< OtherElement, L, T >::iterator fIter = field.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++fIter)
      iter->rightMultiply(*fIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement, typename OtherAtom  >
  inline void Component< Element, L, T, Atom >::rightMultiply(Component< OtherElement, L, T, OtherAtom > const &other)
  {
    typename Component< OtherElement, L, T, OtherAtom >::iterator cIter = other.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++cIter)
      iter->rightMultiply(*cIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement >
  inline Component< Element, L, T, Atom > &Component< Element, L, T, Atom >::operator+=(Field< OtherElement, L, T > const &field)
  {
    typename Field< OtherElement, L, T >::iterator fIter = field.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++fIter)
      iter->operator+=(*fIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement, typename OtherAtom  >
  inline Component< Element, L, T, Atom > &Component< Element, L, T, Atom >::operator+=(Component< OtherElement, L, T, OtherAtom > const &other)
  {
    typename Component< OtherElement, L, T, OtherAtom >::iterator cIter = other.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++cIter)
      iter->operator+=(*cIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement >
  inline Component< Element, L, T, Atom > &Component< Element, L, T, Atom >::operator-=(Field< OtherElement, L, T > const &field)
  {
    typename Field< OtherElement, L, T >::iterator fIter = field.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++fIter)
      iter->operator-=(*fIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement, typename OtherAtom  >
  inline Component< Element, L, T, Atom > &Component< Element, L, T, Atom >::operator-=(Component< OtherElement, L, T, OtherAtom > const &other)
  {
    typename Component< OtherElement, L, T, OtherAtom >::iterator cIter = other.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++cIter)
      iter->operator-=(*cIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename Scalar >
  inline Component< Element, L, T, Atom > &Component< Element, L, T, Atom >::operator*=(Scalar const &scalar)
  {
    for (iterator iter = begin(); iter != end(); ++iter)
      iter->operator*=(scalar);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement >
  inline Component< Element, L, T, Atom > &Component< Element, L, T, Atom >::operator*=(Field< OtherElement, L, T > const &field)
  {
    typename Field< OtherElement, L, T >::iterator fIter = field.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++fIter)
      iter->operator*=(*fIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement, typename OtherAtom >
  inline Component< Element, L, T, Atom > &Component< Element, L, T, Atom >::operator*=(Component< OtherElement, L, T, OtherAtom > const &other)
  {
    typename Component< OtherElement, L, T, OtherAtom >::iterator cIter = other.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++cIter)
      iter->operator*=(*cIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename Scalar >
  inline Component< Element, L, T, Atom > &Component< Element, L, T, Atom >::operator/=(Scalar const &scalar)
  {
    for (iterator iter = begin(); iter != end(); ++iter)
      iter->operator/=(scalar);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement >
  inline Component< Element, L, T, Atom > &Component< Element, L, T, Atom >::operator/=(Field< OtherElement, L, T > const &field)
  {
    typename Field< OtherElement, L, T >::iterator fIter = field.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++fIter)
      iter->operator/=(*fIter);
  }

  template< typename Element, size_t L, size_t T, typename Atom >
  template< typename OtherElement, typename OtherAtom >
  inline Component< Element, L, T, Atom > &Component< Element, L, T, Atom >::operator/=(Component< OtherElement, L, T, OtherAtom > const &other)
  {
    typename Component< OtherElement, L, T, OtherAtom >::iterator cIter = other.begin();
    for (iterator iter = begin(); iter != end(); ++iter, ++cIter)
      iter->operator/=(*cIter);
  }
}
