inline Matrix Matrix::operator+(Matrix const &other) const
{
  Matrix tmp;
  std::transform(d_data, d_data+16, other.d_data, tmp.d_data,
                  std::plus< std::complex< double > >());
  return tmp;
}

inline Matrix Matrix::operator-(Matrix const &other) const
{
  Matrix tmp;
  std::transform(d_data, d_data+16, other.d_data, tmp.d_data,
                  std::minus< std::complex< double > >());
  return tmp;
}

inline void Matrix::operator+=(Matrix const &other)
{
  std::transform(d_data, d_data+16, other.d_data, d_data,
                  std::plus< std::complex< double > >());
}

inline void Matrix::operator-=(Matrix const &other)
{
  std::transform(d_data, d_data+16, other.d_data, d_data,
                  std::minus< std::complex< double > >());
}

inline Matrix Matrix::operator*(Matrix const &rhs) const
{
  Matrix tmp(*this);
  tmp *= rhs;
  return tmp;
}

inline Matrix Matrix::operator*(double const &factor) const
{
  Matrix tmp(*this);
  tmp *= factor;
  return tmp;
}

inline Matrix Matrix::operator*(std::complex< double > const &factor) const
{
  Matrix tmp(*this);
  tmp *= factor;
  return tmp;
}

inline void Matrix::operator*=(double const &factor)
{
  std::transform(d_data, d_data+16, d_data,
                  bind2nd(std::multiplies< std::complex< double > >(), std::complex< double >(factor, 0)));
}

inline void Matrix::operator*=(std::complex< double > const &factor)
{
  std::transform(d_data, d_data+16, d_data,
                  bind2nd(std::multiplies< std::complex< double > >(), factor));
}

inline std::complex< double > const &Matrix::operator()(Base::DiracIndex const Dirac_src,
                                                                Base::DiracIndex const Dirac_snk) const
{
  return d_data[Dirac_src + 4*Dirac_snk];
}

inline bool Matrix::operator==(Matrix const &rhs)
{
  return std::equal(d_data, d_data+16, rhs.d_data);
}
