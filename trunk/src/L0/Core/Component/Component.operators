Atom &operator[](size_t const idx);

Atom const &operator[](size_t const idx) const;

template< typename Scalar >
void leftMultiply(Scalar const &other);

template< typename OtherElement >
void leftMultiply(Field< OtherElement, L, T > const &other);

template< typename OtherElement, typename OtherAtom  >
void leftMultiply(Component< OtherElement, L, T, OtherAtom > const &other);

template< typename Scalar >
void rightMultiply(Scalar const &other);

template< typename OtherElement >
void rightMultiply(Field< OtherElement, L, T > const &other);

template< typename OtherElement, typename OtherAtom  >
void rightMultiply(Component< OtherElement, L, T, OtherAtom > const &other);

template< typename OtherElement >
Component< Element, L, T, Atom > &operator+=(Field< OtherElement, L, T > const &other);

template< typename OtherElement, typename OtherAtom  >
Component< Element, L, T, Atom > &operator+=(Component< OtherElement, L, T, OtherAtom > const &other);

template< typename OtherElement >
Component< Element, L, T, Atom > &operator-=(Field< OtherElement, L, T > const &other);

template< typename OtherElement, typename OtherAtom  >
Component< Element, L, T, Atom > &operator-=(Component< OtherElement, L, T, OtherAtom > const &other);

template< typename Scalar >
Component< Element, L, T, Atom > &operator*=(Scalar const &rhand);

template< typename OtherElement >
Component< Element, L, T, Atom > &operator*=(Field< OtherElement, L, T > const &field);

template< typename OtherElement, typename OtherAtom >
Component< Element, L, T, Atom > &operator*=(Component< OtherElement, L, T, OtherAtom > const &field);

template< typename Scalar >
Component< Element, L, T, Atom > &operator/=(Scalar const &rhand);

template< typename OtherElement >
Component< Element, L, T, Atom > &operator/=(Field< OtherElement, L, T > const &field);

template< typename OtherElement, typename OtherAtom >
Component< Element, L, T, Atom > &operator/=(Component< OtherElement, L, T, OtherAtom > const &field);
