template< size_t Index >
Matrix Matrix::operator*(Gamma< Index > const &gamma) const //matrix = matrix * gamma
{
  Matrix out(*this);
  for (size_t itr = 0; itr < 16; itr++)
    out.d_data[itr] *= gamma.sign(itr % 4); // columnwise multiply by sign
  for (size_t itr = 0; itr < 3; itr++) {
    if (gamma.perm(itr) > itr) {
      for (size_t rowitr = 0; rowitr < 4; rowitr++) // permute columns, iterate over rows
        std::swap(*(out.d_data + 4 * rowitr + itr), *(out.d_data + 4 * rowitr + gamma.perm(itr)));
    }
  }
  return out;
}

template< size_t Index >
void Matrix::operator*=(Gamma< Index > const &gamma) //matrix *= gamma
{
  for (size_t itr = 0; itr < 16; itr++) 
    this->d_data[itr] *= gamma.sign(itr%4); // columnwise multiply by sign
  for (size_t itr = 0; itr < 3; itr++) {
    if (gamma.perm(itr) > itr) {
      for (size_t rowitr = 0; rowitr < 4; rowitr++) // swap columns, iterate over rows
        std::swap(*(this->d_data + 4 * rowitr + itr), *(this->d_data + 4 * rowitr + gamma.perm(itr)));
    }
  }
}

template< size_t Index >
void Matrix::right_multiply(Gamma< Index > const &gamma) //matrix *= gamma
{
  (*this)*=gamma;
}

template< size_t Index >
Matrix operator*(Gamma< Index > const &gamma, Matrix const &mat) //matrix = gamma * matrix
{
  Matrix out(mat);
  for (size_t itr = 0; itr < 3; itr++) {
    if (gamma.perm(itr) > itr) {
      for (size_t colitr = 0; colitr < 4; colitr++) // swap rows, iterate over columns
        std::swap(*(out.d_data + 4 * itr + colitr), *(out.d_data + 4 * gamma.perm(itr) + colitr));
    }
  }
  for (size_t itr = 0; itr < 16; itr++) 
    out.d_data[itr] *= gamma.sign(itr/4); //rowwise multiply by sign
  return out;
}

template< size_t Index >
void Matrix::left_multiply(Gamma< Index > const &gamma) //gamma * matrix
{
  for (size_t itr = 0; itr < 3; itr++) {
    if (gamma.perm(itr) > itr) {
      for (size_t colitr = 0; colitr < 4; colitr++) // swap rows, iterate over columns
        std::swap(*(this->d_data + 4 * itr + colitr), *(this->d_data + 4 * gamma.perm(itr) + colitr));
    }
  }
  for (size_t itr = 0; itr < 16; itr++) 
    this->d_data[itr] *= gamma.sign(itr/4); //rowwise multiply by sign
}
