namespace QCD
{

  template< size_t Index >
  inline void Tensor::operator*=(Dirac::Gamma< Index > const &gamma)
  {
    // swapping entries belonging to first <-> second as well as third <-> forth index
    // does never appear (but when multiplying Dirac::Sigma matrices),
    // i.e. gamma.perm(0) = {0,2,3}, gamma.perm(1) = {1,2,3}.
    // so regarding the permutation the following two lines will do the job
    std::swap_ranges(d_data,       d_data +  36, d_data + 36*gamma.perm(0));
    std::swap_ranges(d_data +  36, d_data +  72, d_data + 36*gamma.perm(1));

    std::transform(d_data,       d_data +  36, d_data,
                   std::bind1st(std::multiplies< std::complex< double > >(), gamma.sign(0)));
    std::transform(d_data +  36, d_data +  72, d_data +  36,
                   std::bind1st(std::multiplies< std::complex< double > >(), gamma.sign(1)));
    std::transform(d_data +  72, d_data + 108, d_data +  72,
                   std::bind1st(std::multiplies< std::complex< double > >(), gamma.sign(2)));
    std::transform(d_data + 108, d_data + 144, d_data + 108,
                   std::bind1st(std::multiplies< std::complex< double > >(), gamma.sign(3)));
    //std::cerr << "warning: using unspecialized template function for Tensor*Gamma" << Index << std::endl;
  }

  template< >
  inline void Tensor::operator*=(Dirac::Gamma< 5 > const &gamma)
  {
    std::transform(reinterpret_cast< double * > (d_data +  72),
                   reinterpret_cast< double * > (d_data + 144),
                   reinterpret_cast< double * > (d_data +  72),
                   std::bind1st(std::multiplies< double >(), -1));
  }


  template< >
  inline void Tensor::operator*=(Dirac::Gamma< 0 > const &gamma)
  {

    std::transform(reinterpret_cast< double * > (d_data),
                   reinterpret_cast< double * > (d_data + 144),
                   reinterpret_cast< double * > (d_data),
                   std::bind1st(std::multiplies< double >(), -1));
  }


  template< >
  inline void Tensor::operator*=(Dirac::Gamma< -1 > const &gamma)
  {
    // nothing to do
  }

  template< size_t Index >
  inline Tensor Tensor::operator*(Dirac::Gamma< Index > const &gamma) const
  {
    Tensor tmp(*this);
    tmp *= gamma;
    return tmp;
  }

  template< >
  inline Tensor Tensor::operator*(Dirac::Gamma< 5 > const &gamma) const
  {
    Tensor tmp(*this);
    std::transform(reinterpret_cast< double * > (tmp.d_data +  72),
                   reinterpret_cast< double * > (tmp.d_data + 144),
                   reinterpret_cast< double * > (tmp.d_data +  72),
                   std::bind1st(std::multiplies< double >(), -1));
    return tmp;
  }

  template< >
  inline Tensor Tensor::operator*(Dirac::Gamma< -1 > const &gamma) const
  {
    return Tensor(*this);
  }


  // ------ non-member operators ---------------------------------------------


  template< size_t Index >
  inline void operator*=(Dirac::Gamma< Index > const &gamma, Tensor &tensor)
  {
    for(size_t Idx=0; Idx<12; Idx++)
    {
      (tensor(Idx)).leftMultiply(gamma);
    }
  }

  template< >
  inline void operator*=(Dirac::Gamma< -1 > const &gamma, Tensor &tensor)
  {
    // nothing to do
  }

  template< size_t Index >
  inline Tensor operator*(Dirac::Gamma< Index > const &gamma, Tensor const &tensor)
  {
    Tensor tmp(tensor);
    for(size_t Idx=0; Idx<12; Idx++)
    {
      (tmp(Idx)).leftMultiply(gamma);
    }
    return tmp;
  }

  template< >
  inline Tensor operator*(Dirac::Gamma< -1 > const &gamma, Tensor const &tensor)
  {
    return Tensor(tensor);
  }

  template< size_t Index >
  inline void QCD::Tensor::rightMultiply(Dirac::Gamma< Index > const &gamma)
  {
    for(size_t Idx=0; Idx<12; Idx++)
    {
      ((*this)(Idx)).leftMultiply(gamma);
    }
  }

}
