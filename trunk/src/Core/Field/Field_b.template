namespace Core
{
  template< typename Element, size_t T, size_t L >
  void Core::Field< Element, T, L >::readFromFile(char const* fileName)
  {
    size_t written = 0; //Number of locally written elements

    if (d_grid.rank()) // Prepare to receive
    {
      for (size_t ctr = 0; ctr < (d_grid.localVolume() / d_grid.contiguousBlock()); ++ctr, written += d_grid.contiguousBlock())
      {
        d_grid.grid().Recv(d_field + written, (d_grid.contiguousBlock() * sizeof(Element)) / sizeof(double),
                           MPI::DOUBLE, 0, TAG_FILE_DISTRIBUTION);
      }
      return;
    }

    // At this point, we know we're node 0
    Element *fileBuffer = new Element[d_grid.contiguousBlock()];
    Lime::Reader confFile(fileName);

    // Check the content of this file for a simple sanity condition.
    if (d_grid.totalVolume() * sizeof(Element) != confFile.size())
    {
      std::cerr << "Content of " << fileName << " is of inappropriate size." << std::endl;
      MPI::COMM_WORLD.Abort(EIO);
    }

    size_t nBlocks = d_grid.totalVolume() / d_grid.contiguousBlock();
    for (size_t ctr = 0; ctr < nBlocks; ++ctr)
    {
      confFile.read(fileBuffer, d_grid.contiguousBlock());
      if (confFile.fail())
        MPI::COMM_WORLD.Abort(EIO);

      size_t destination = d_grid.rank(ctr * d_grid.contiguousBlock());
      if (!destination) // This block of data should be stored locally
      {
        std::copy(fileBuffer, fileBuffer + d_grid.contiguousBlock(), d_field + written);
        written += d_grid.contiguousBlock();
        continue;
      }
      d_grid.grid().Send(fileBuffer, (d_grid.contiguousBlock() * sizeof(Element)) / sizeof(double),
                         MPI::DOUBLE, destination, TAG_FILE_DISTRIBUTION);
    }
    delete[] fileBuffer;
  }
}
