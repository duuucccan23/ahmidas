namespace Core
{
  template< typename Element, size_t L, size_t T >
  void Field< Element, L, T >::setSurfaces()
  {
    size_t const elSize = sizeof(Element) / sizeof(double);
    d_surfaces[idx_T] = MPI::DOUBLE.Create_vector(d_grid.localVolume() / d_grid.localVolume(),
                                                  d_grid.surface(idx_T) * elSize,
                                                  d_grid.localVolume() * elSize);
    d_surfaces[idx_T].Commit();

    d_surfaces[idx_X] = MPI::DOUBLE.Create_vector(d_grid.localVolume() / d_grid.surface(idx_T),
                                                  d_grid.surface(idx_X) * elSize,
                                                  d_grid.surface(idx_T) * elSize);
    d_surfaces[idx_X].Commit();

    d_surfaces[idx_Y] = MPI::DOUBLE.Create_vector(d_grid.localVolume() / d_grid.surface(idx_X),
                                                  d_grid.surface(idx_Y) * elSize,
                                                  d_grid.surface(idx_X) * elSize);
    d_surfaces[idx_Y].Commit();

    d_surfaces[idx_Z] = MPI::DOUBLE.Create_vector(d_grid.localVolume() / d_grid.surface(idx_Y),
                                                  d_grid.surface(idx_Z) * elSize,
                                                  d_grid.surface(idx_Y) * elSize);
    d_surfaces[idx_Z].Commit();

    for (size_t ctr = 0; ctr < 4; ++ctr)
      if (d_grid.dims()[ctr] != 1 && d_surfaces[ctr].Pack_size(1, d_grid.grid()) > d_bufferSize)
        d_bufferSize = d_surfaces[ctr].Pack_size(1, d_grid.grid());

    if (d_bufferSize != 0)
    {
      d_bufferSize += MPI_BSEND_OVERHEAD; // Nasty little source of segfaults...
      d_buffer = new Element[(d_bufferSize + elSize - 1) / elSize];
    }
  }
}
