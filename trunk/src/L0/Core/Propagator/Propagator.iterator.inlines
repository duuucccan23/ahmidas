namespace Core
{

  /* private constructor - not really necessary 
     because the one of the base class Core::Field< QCD::Tensor >::iterator 
     can be used   */

//   inline Propagator::iterator::iterator(Core::Propagator &target,  size_t idx)
//     : Core::Field< QCD::Tensor >::iterator(*(target.d_components), idx), d_target(target)
//   {}


  /* copy constructor */

  inline Propagator::iterator::iterator(Propagator::iterator const &other)
    : d_iter(other.d_iter, other.d_iter.d_idx), d_target(other.d_target)
  {}



//   inline bool Propagator::iterator::operator==(Propagator::iterator const &other) const
//   {
//     return (d_target.d_components)[d_idx] == (other.d_target.d_components)[other.d_idx];
//   }
// 
// 
// 
//   inline bool Propagator::iterator::operator!=(Propagator::iterator const &other) const
//   {
//     return (d_target.d_components)[d_idx] != (other.d_target.d_components)[other.d_idx];
//   }


  /* access field components */



//   inline QCD::Tensor &Propagator::iterator::operator*()
//   {
//     return (d_target.d_components)[0];
//   }
// 
// 
// 
//   inline QCD::Tensor *Propagator::iterator::operator->()
//   {
//     return &((d_target.d_components)[0]);
//   }
// 
//   /* access field components  - "const" version */
// 
// 
// 
//   inline QCD::Tensor const &Propagator::iterator::operator*() const
//   {
//     return (d_target.d_components)[0];
//   }
// 
// 
// 
//   inline QCD::Tensor const *Propagator::iterator::operator->() const
//   {
//     return &((d_target.d_components)[0]);
//   }


  /* increment & decrement */



  inline Propagator::iterator &Propagator::iterator::operator++()
  {
    //d_idx += d_stride;
    return *this;
  }



  inline Propagator::iterator &Propagator::iterator::operator--()
  {
    //d_idx -= d_stride;
    return *this;
  }

}
