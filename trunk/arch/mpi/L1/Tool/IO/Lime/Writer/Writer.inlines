namespace Tool
{
  namespace IO
  {
    namespace Lime
    {

      inline Writer::Record::Record()
        : size(0), recOffset(0), offset(0), version(1), mesBeg(false), mesEnd(false)
      {
        std::fill(type, type + 128, '\0');
      }

      inline Writer::Record::Record(size_t const rOffset, size_t const recSize)
        : size(recSize), recOffset(rOffset), offset(0), version(1), mesBeg(false), mesEnd(false)
      {
        std::fill(type, type + 128, '\0');
      }

      inline Writer::Writer(std::string const &filename, bool const writeHeader)
        : d_stream(filename.c_str()), d_hasWritten(false), d_messageRunning(false), d_writeHeader(writeHeader)
      {}

      inline Writer::~Writer()
      {
        d_record.mesEnd = true;
        finalize();
      }

      template< typename DataType >
      inline void Writer::write(DataType const *buffer, uint64_t elements)
      {
        d_stream.write(reinterpret_cast< const char* >(buffer), elements * sizeof(DataType));
      }

      template< typename DataType >
      inline void Writer::write(DataType const *buffer, DataType const *finish)
      {
        for (DataType const *iter = buffer; buffer != finish; ++iter)
          d_stream.write(reinterpret_cast< const char* >(iter), sizeof(DataType));
      }

      template< typename DataType >
      inline void Writer::fill(DataType const &buffer, uint64_t elements)
      {
        for (uint64_t ctr = 0; ctr < elements; ++ctr)
          d_stream.write(reinterpret_cast< const char* >(&buffer), sizeof(DataType));
      }

      inline bool Writer::fail() const
      {
        return d_stream.fail();
      }

      inline bool Writer::good() const
      {
        return d_stream.good();
      }

      inline void Writer::seekp(std::streampos const offset)
      {
        d_record.offset = (offset + std::streampos(s_headerSize));
        d_stream.seekp(d_record.offset + d_record.recOffset, std::ios::beg);
      }


      inline void Writer::finishMessage()
      {
        d_record.mesEnd = true;
        d_messageRunning = false;
      }
    }
  }
}
