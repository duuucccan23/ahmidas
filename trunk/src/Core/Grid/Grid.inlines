namespace Core
{
  template< size_t L, size_t T >
  inline Grid< L, T >::~Grid()
  {}

  template< size_t L, size_t T >
  inline MPI::Cartcomm &Grid< L, T >::grid()
  {
    return d_grid;
  }
  
  template< size_t L, size_t T >
  inline MPI::Cartcomm &Grid< L, T >::timeSlice()
  {
    return d_timeSlice;
  }
  
  template< size_t L, size_t T >
  inline size_t const* Grid< L, T >::coords() const
  {
    return d_coords;
  }

  template< size_t L, size_t T >
  inline size_t Grid< L, T >::rank() const
  {
    return d_grid.Get_rank();
  }

  template< size_t L, size_t T >
  inline size_t const *Grid< L, T >::dims() const
  {
    return d_dims;
  }

  template< size_t L, size_t T >
  inline size_t Grid< L, T >::dim(size_t idx) const
  {
    return d_dims[idx];
  }

  template< size_t L, size_t T >
  inline size_t const *Grid< L, T >::localVolumes() const
  {
    return d_volumes;
  }

  template< size_t L, size_t T >
  inline size_t Grid< L, T >::localVolume(size_t idx) const
  {
    return (idx == 4 ? d_localVolume : d_volumes[idx]);
  }

  template< size_t L, size_t T >
  inline size_t Grid< L, T >::localVolume() const
  {
    return d_localVolume;
  }

  template< size_t L, size_t T >
  inline size_t Grid< L, T >::totalVolume() const
  {
    return (L * L * L * T);
  }

  template< size_t L, size_t T >
  inline size_t const *Grid< L, T >::surfaces() const
  {
    return d_surfaces;
  }

  template< size_t L, size_t T >
  inline size_t Grid< L, T >::surface(size_t idx) const
  {
    return d_surfaces[idx];
  }

  template< size_t L, size_t T >
  inline size_t Grid< L, T >::neighbour(SpaceTimeIndex idx, Direction dir) const
  {
    int result, rank = d_grid.Get_rank();
    d_grid.Shift(idx, dir, rank, result);
    return result;
  }
  
  template< size_t L, size_t T >
  inline size_t Grid< L, T >::bufferVolume() const
  {
    return d_bufferVolume;
  }
}
