template< typename Element >
void Tool::IO::saveScidac(Core::Field< Element > const &field, std::string const &filename)
{
  size_t const elements = sizeof(Element) / sizeof(double);
  Lime::Writer writer(filename);

  assert(writer.good());

  // write info header
  writer.newRecord("propagator-type");
  std::string propagator_type_string("DiracFermion_Sink");
  writer.write(propagator_type_string.c_str(), propagator_type_string.length()*sizeof(char));
  writer.finishMessage();

  // write format header
  writer.newRecord("etmc-propagator-format");

  std::string info_string;
  {
    std::ostringstream oss;
    oss << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<etmcFormat>\n<field>diracFermion</field>\n";
    oss << "<precision>64</precision>\n";
    oss << "<flavours>1</flavours>\n";
    oss << "<lx>" << field.L() << "</lx>\n";
    oss << "<ly>" << field.L() << "</ly>\n";
    oss << "<lz>" << field.L() << "</lz>\n";
    oss << "<lt>" << field.T() << "</lt>\n";
    oss << "</etmcFormat>";
    info_string = oss.str();
  }

  writer.write(info_string.c_str(), info_string.length()*sizeof(char));
  writer.finishMessage();

  writer.newRecord("scidac-binary-data");

  double buffer[elements];
  for (size_t siteIdx = 0; siteIdx < field.volume(); ++siteIdx)
  {
    std::copy(reinterpret_cast< double const* >(&(field.constPhysicalIndex(siteIdx))), reinterpret_cast< double const* >(&(field.constPhysicalIndex(siteIdx))) + elements, buffer);
    if (!Base::bigEndian)
    {
      Base::swapEndian(buffer, buffer + elements, sizeof(double));
    }
    writer.write(buffer, elements);
  }
}
