Starting from the following lattice

789
456
123

in memory this is stored as 123456789.

With the direction X as the direction for 123,
The up direction is taken as from 1 to 3, and denoted as +1

That means that 1 is the down neighbour of 2, and lattice[0] = 1.

A field shift in the X down direction results then in

897
564
231

Such that lattice[0] is now 2, and lattice[2] is now 1.

We don't want to copy the field around in memory, so we retain
123456789 in memory.

That is why we have offsets to point to the proper location in memory.
The new offset in the X direction should point to the lattice element 2, so lattice[1].
The original offset in memory was 0, the new offset in memory should be 1.

To get the new offset, we need to add 1 to the old offset. Or more precisely, we need to subtract the direction of our shift (which is +1).
Repeating this shift, we get:

987
645
312

With the proper offset now being 2. So far so good with the subtraction of the shift direction.

Repeating the shift again, we get our old lattice back:

789
456
123

So now the offset should be again 0. We therefore need a mod with the localSize of the dimension in which we shift (3 in this case).

Down shifts are now taken care of. Now shift in the up direction.

A field shift in the X up direction results then in

978
645
312

Such that lattice[0] is now 3, and lattice[1] is now 1.

Again we need to change the offsets to point to the proper location in memory.
The new offset in the X direction should point to the lattice element 3, so lattice[2].
The original offset was 0, the new offset should be 2. But if we just subtract the direction as before, we end up at -1.
Modding with the dimension won't help, so we need to add the localSize of the dimension to get a positive number.
This is not a problem for the shifts in the down direction and all the other shifts in the up directions, since we anyway mod afterwards.

The implementation therefore says:

    d_offsets[idx] += d_weave.localSize(idx) - dir;
    d_offsets[idx] %= d_weave.localSize(idx);

