template< typename Element, size_t L, size_t T >
Core::Field< Element, L, T > Base::IO::loadScidac(std::string const &filename)
{
  size_t const elements = sizeof(Element) / sizeof(double);
  Lime::Reader reader(filename);
  Core::Field< Element, L, T > result;

  reader.retrieveRecord(reader.findRecord("scidac-binary-data"));
  if (reader.fail())
    return result; //NOTE Record not found, returning empty field! Add error exit here.

  //Poor man's parser for reading the precision should be inserted here, beyond we now assume double as input

  Element *dataPtr = result.raw(); //Starting memory address of the field.
  float buffer[elements];

  for (size_t siteIdx = 0; siteIdx < result.volume(); ++siteIdx)
  {
    reader.read(buffer, elements);
    if (!Base::bigEndian)
      swapEndian(buffer, buffer + elements, sizeof(float));
    std::copy(buffer, buffer + elements, reinterpret_cast< double* >(dataPtr + siteIdx));
  }
  return result;
}
