template< size_t Stride >
class const_iterator;

template< size_t Stride >
class iterator: public std::iterator< std::bidirectional_iterator_tag, Core::Field< std::complex< double >, L, T > >
{
  friend class Propagator;
  friend class Propagator::const_iterator< Stride >;

  Propagator< L, T, Dirac, Colour >  &d_target;

  iterator(Propagator< L, T, Dirac, Colour > &target);

  public:
    iterator(iterator< Stride > const &other);

    bool operator==(iterator< Stride > const &other) const;
    bool operator==(const_iterator< Stride > const &other) const;

    bool operator!=(iterator< Stride > const &other) const;
    bool operator!=(const_iterator< Stride > const &other) const;

    Core::Field< std::complex< double >, L, T > &operator*();
    Core::Field< std::complex< double >, L, T > const &operator*() const;

    Core::Field< std::complex< double >, L, T > *operator->();
    Core::Field< std::complex< double >, L, T > const *operator->() const;

    iterator &operator--();
    iterator operator--(int);

    iterator &operator++();
    iterator operator++(int);
};

