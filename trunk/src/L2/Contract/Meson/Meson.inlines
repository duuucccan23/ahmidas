
#define __NO_INTERPOLATING_FIELD__

namespace Contract
{

  template< size_t IndexSrc, size_t IndexSnk >
  Core::Correlator light_meson_twopoint(Core::Propagator const *u, Core::Propagator const *d,
                                        Dirac::Gamma< IndexSrc > const &interpolSrc,
                                        Dirac::Gamma< IndexSnk > const &interpolSnk,
                                        size_t const *momentum)
  {
    if (d != 0)
    {
      assert(u->T() == d->T());
      assert(u->L() == d->L());
    }

    Core::Propagator *d_bar;


#ifdef __NO_INTERPOLATING_FIELD__
    d_bar = new Core::Propagator(*u);
    d_bar->dagger();
    Core::Correlator twopoint_nif(u->L(), u->T(), (*u)*(*d_bar));
    twopoint_nif.sumOverSpatialVolume();
    if (twopoint_nif.isRoot())
    {
      std::cout << "\n ------ interpolating field and gamma5 left out ---------------------- \n" << std::endl;
      std::cout << "\n ------ (should give the same if interpolating field is gamma5) ------ \n" << std::endl;
      for (size_t t=0; t<twopoint_nif.getT(); t++)
      {
        std::cout << t << "  " << std::scientific << std::setprecision(10) << std::showpos
                  << tr(twopoint_nif[t]).real() << "  " << tr(twopoint_nif[t]).imag() << std::endl;
//         if (t==twopoint_nif.getT()-1)
//         {
//           std::cout << " = trace of" << std::endl;
//           std::cout << twopoint_nif[t]   << std::endl;
//         }
      }
      std::cout << "\n ------------------------------------------ \n" << std::endl;
    }
    delete d_bar;
#endif

    d_bar = new Core::Propagator(*u);
    d_bar->revert();

    Core::Propagator tmpU((*u)*interpolSnk);
    Core::Propagator tmpD((*d_bar)*interpolSrc);

    delete d_bar;

    Core::Correlator twopoint(u->L(), u->T(), tmpU*tmpD);

    twopoint.sumOverSpatialVolume();

    if (twopoint.isRoot())
    {
      for (size_t t=0; t<twopoint.getT(); t++)
      {
        std::cout << t << "  " << std::scientific << std::setprecision(10) << std::showpos
                  << tr(twopoint[t]).real() << "  " << tr(twopoint[t]).imag() << std::endl;
//         if (t==twopoint.getT()-1)
//         {
//           std::cout << " = trace of" << std::endl;
//           std::cout << twopoint[t]   << std::endl;
//         }
      }
    }
    return twopoint;
  }


  template< size_t IndexSrc, size_t IndexSnk >
  inline Core::Correlator light_meson_twopoint(Core::Propagator const *u, Core::Propagator const *d,
                                               Dirac::Gamma< IndexSrc > const &interpolSrc,
                                               Dirac::Gamma< IndexSnk > const &interpolSnk)
  {
    // zero momentum projection
    size_t const p[3] = {0, 0, 0};
    return light_meson_twopoint(u, d, interpolSrc, interpolSnk, p);
  }

}
