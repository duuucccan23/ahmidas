namespace QCD
{

  // the following functions are not declared in order to hide them form the interface

  inline void Tensor::left_multiply_proton()
  {

// this would be the corresponding Gamma structure
//   template< >
//   size_t const Gamma< 245 >::s_perm[4] = {1, 0, 3, 2};
//   template< >
//   std::complex< double > const Gamma< 54 >::s_sign[4] = {1, -1, 1, -1};

    std::swap_ranges(d_data,      d_data +  36, d_data +  36);
    std::swap_ranges(d_data + 72, d_data + 108, d_data + 108);
    // actually we have -Gamma2*Gamma0*Gamma5, which is considered below
    std::transform(d_data,       d_data +  36, d_data,
                   std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, -1)));
    std::transform(d_data +  36, d_data +  72, d_data +  36,
                   std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, +1)));
    std::transform(d_data +  72, d_data + 108, d_data +  72,
                   std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, -1)));
    std::transform(d_data + 108, d_data + 144, d_data + 108,
                   std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, +1)));
  }


  inline void Tensor::right_multiply_proton()
  {
    std::complex< double > *spinor_data = NULL;
    // personal note: if this turns out to work, don't use spinor interface but d_data directly
    for(size_t Idx=0; Idx<12; Idx++)
    {
      spinor_data = d_data + Idx*12;
      std::swap_ranges(spinor_data    , spinor_data + 3, spinor_data + 3);
      std::swap_ranges(spinor_data + 6, spinor_data + 9, spinor_data + 9);
      std::transform(spinor_data,     spinor_data +  3, spinor_data,
                     std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, +1)));
      std::transform(spinor_data + 3, spinor_data +  6, spinor_data + 3,
                     std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, -1)));
      std::transform(spinor_data + 6, spinor_data +  9, spinor_data + 6,
                     std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, +1)));
      std::transform(spinor_data + 9, spinor_data + 12, spinor_data + 9,
                     std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, -1)));
    }
  }

}
