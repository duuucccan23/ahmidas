namespace Core
{
  template< typename Element, size_t L, size_t T >
  inline Field< Element, L, T >::~Field()
  {
    destroy();
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::iterator Field< Element, L, T >::begin()
  {
    return iterator(*this, 0);
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::iterator Field< Element, L, T >::end()
  {
    return iterator(*this, d_weave.localVolume());
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::const_iterator Field< Element, L, T >::begin() const
  {
    return const_iterator(*this, 0);
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::const_iterator Field< Element, L, T >::end() const
  {
    return const_iterator(*this, d_weave.localVolume());
  }

  template< typename Element, size_t L, size_t T >
  template< typename Atom >
  inline Component< Element, L, T, Atom > Field< Element, L, T >::component(size_t const idx)
  {
    return Component< Element, L, T, Atom >(*this, idx);
  }

  template< typename Element, size_t L, size_t T >
  inline Element &Field< Element, L, T >::operator[](size_t const idx)
  {
    isolate();
    return physicalIndex(idx);
  }

  template< typename Element, size_t L, size_t T >
  inline Element const &Field< Element, L, T >::operator[](size_t const idx) const
  {
    return constPhysicalIndex(idx);
  }

  template< typename Element, size_t L, size_t T >
  inline Element * const Field< Element, L, T >::raw()
  {
    return d_field;
  }

  template< typename Element, size_t L, size_t T >
  inline Element &Field< Element, L, T >::physicalIndex(size_t const idx)
  {
    isolate();
    return d_field[shiftIdxToOffset(idx)];
  }

  template< typename Element, size_t L, size_t T >
  inline Element &Field< Element, L, T >::fastPhysicalIndex(size_t const idx)
  {
    return d_field[shiftIdxToOffset(idx)];
  }

  template< typename Element, size_t L, size_t T >
  inline Element const &Field< Element, L, T >::physicalIndex(size_t const idx) const
  {
    return constPhysicalIndex(idx);
  }

  template< typename Element, size_t L, size_t T >
  inline Element const &Field< Element, L, T >::constPhysicalIndex(size_t const idx) const
  {
    return d_field[shiftIdxToOffset(idx)];
  }

  template< typename Element, size_t L, size_t T >
  inline Element &Field< Element, L, T >::memoryIndex(size_t const idx)
  {
    isolate();
    return d_field[idx];
  }

  template< typename Element, size_t L, size_t T >
  inline Element &Field< Element, L, T >::fastMemoryIndex(size_t const idx)
  {
    return d_field[idx];
  }

  template< typename Element, size_t L, size_t T >
  inline Element const &Field< Element, L, T >::memoryIndex(size_t const idx) const
  {
    return constMemoryIndex(idx);
  }

  template< typename Element, size_t L, size_t T >
  inline Element const &Field< Element, L, T >::constMemoryIndex(size_t const idx) const
  {
    return d_field[idx];
  }

  template< typename Element, size_t L, size_t T >
  inline Element *Field< Element, L, T >::at(size_t x, size_t y, size_t z, size_t t)
  {
    if (d_weave.globalCoordToLocalIndex(x, y, z, t) != L * L * L * T)
      return &physicalIndex(d_weave.globalCoordToLocalIndex(x, y, z, t));
    else
      return 0;
  }

  template< typename Element, size_t L, size_t T >
  inline Element *Field< Element, L, T >::fastAt(size_t x, size_t y, size_t z, size_t t)
  {
    if (d_weave.globalCoordToLocalIndex(x, y, z, t) != L * L * L * T)
      return &fastPhysicalIndex(d_weave.globalCoordToLocalIndex(x, y, z, t));
    else
      return 0;
  }

  template< typename Element, size_t L, size_t T >
  inline Element const *Field< Element, L, T >::at(size_t x, size_t y, size_t z, size_t t) const
  {
    if (d_weave.globalCoordToLocalIndex(x, y, z, t) != L * L * L * T)
      return &constPhysicalIndex(d_weave.globalCoordToLocalIndex(x, y, z, t));
    else
      return 0;
  }

  template< typename Element, size_t L, size_t T >
  inline Element const *Field< Element, L, T >::constAt(size_t x, size_t y, size_t z, size_t t) const
  {
    if (d_weave.globalCoordToLocalIndex(x, y, z, t) != L * L * L * T)
      return &constPhysicalIndex(d_weave.globalCoordToLocalIndex(x, y, z, t));
    else
      return 0;
  }

  template< typename Element, size_t L, size_t T >
  inline size_t Field< Element, L, T >::volume() const
  {
    return d_weave.localVolume();
  }

  template< typename Element, size_t L, size_t T >
  inline size_t Field< Element, L, T >::shiftIdxToZero(size_t const idx) const
  {
    return ((idx                                     % d_weave.localSize(Base::idx_X)) + d_weave.localSize(Base::idx_X)
             - d_offsets[Base::idx_X]) % d_weave.localSize(Base::idx_X) +
           ((idx / d_weave.localSurface(Base::idx_Y) % d_weave.localSize(Base::idx_Y)) + d_weave.localSize(Base::idx_Y)
             - d_offsets[Base::idx_Y]) % d_weave.localSize(Base::idx_Y) * d_weave.localSurface(Base::idx_Y) +
           ((idx / d_weave.localSurface(Base::idx_Z) % d_weave.localSize(Base::idx_Z)) + d_weave.localSize(Base::idx_Z)
             - d_offsets[Base::idx_Z]) % d_weave.localSize(Base::idx_Z) * d_weave.localSurface(Base::idx_Z) +
           ((idx / d_weave.localSurface(Base::idx_T) % d_weave.localSize(Base::idx_T)) + d_weave.localSize(Base::idx_T)
             - d_offsets[Base::idx_T]) % d_weave.localSize(Base::idx_T) * d_weave.localSurface(Base::idx_T);
  }

  template< typename Element, size_t L, size_t T >
  inline size_t Field< Element, L, T >::shiftIdxToOffset(size_t const idx) const
  {
    return ((idx                                     % d_weave.localSize(Base::idx_X)) + d_offsets[Base::idx_X])
             % d_weave.localSize(Base::idx_X) +
           ((idx / d_weave.localSurface(Base::idx_Y) % d_weave.localSize(Base::idx_Y)) + d_offsets[Base::idx_Y])
             % d_weave.localSize(Base::idx_Y) * d_weave.localSurface(Base::idx_Y) +
           ((idx / d_weave.localSurface(Base::idx_Z) % d_weave.localSize(Base::idx_Z)) + d_offsets[Base::idx_Z])
             % d_weave.localSize(Base::idx_Z) * d_weave.localSurface(Base::idx_Z) +
           ( idx / d_weave.localSurface(Base::idx_T)                                   + d_offsets[Base::idx_T])
             % d_weave.localSize(Base::idx_T) * d_weave.localSurface(Base::idx_T);
  }
}
