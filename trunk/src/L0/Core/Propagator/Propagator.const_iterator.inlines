// namespace Core
// {
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline Propagator< L, T >::const_iterator< Stride >::const_iterator(Core::Field< QCD::Spinor, L, T > const **target)
//     : d_target(target)
//   {}
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline Propagator< L, T >::const_iterator< Stride >::const_iterator(Propagator< L, T >::const_iterator< Stride > const &other)
//     : d_target(other.d_target)
//   {}
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline Propagator< L, T >::const_iterator< Stride >::const_iterator(Propagator< L, T >::iterator< Stride > const &other)
//     : d_target(other.d_target)
//   {}
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline bool Propagator< L, T >::const_iterator< Stride >::operator==(Propagator< L, T >::iterator< Stride > const &other) const
//   {
//     return (d_target == other.d_target);
//   }
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline bool Propagator< L, T >::const_iterator< Stride >::operator==(Propagator< L, T >::const_iterator< Stride > const &other) const
//   {
//     return (d_target == other.d_target);
//   }
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline bool Propagator< L, T >::const_iterator< Stride >::operator!=(Propagator< L, T >::iterator< Stride > const &other) const
//   {
//     return (d_target != other.d_target);
//   }
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline bool Propagator< L, T >::const_iterator< Stride >::operator!=(Propagator< L, T >::const_iterator< Stride > const &other) const
//   {
//     return (d_target != other.d_target);
//   }
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline Core::Field< QCD::Spinor, L, T > const &Propagator< L, T >::const_iterator< Stride >::operator*() const
//   {
//     return **d_target;
//   }
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline Core::Field< QCD::Spinor, L, T > const *Propagator< L, T >::const_iterator< Stride >::operator->() const
//   {
//     return *d_target;
//   }
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline Propagator< L, T >::const_iterator< Stride > &Propagator< L, T >::const_iterator< Stride >::operator--()
//   {
//     d_target -= Stride;
//     return *this;
//   }
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline Propagator< L, T >::const_iterator< Stride > Propagator< L, T >::const_iterator< Stride >::operator--(int)
//   {
//     d_target -= Stride;
//     return const_iterator(d_target + Stride);
//   }
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline Propagator< L, T >::const_iterator< Stride > &Propagator< L, T >::const_iterator< Stride >::operator++()
//   {
//     d_target += Stride;
//     return *this;
//   }
// 
//   template< size_t L, size_t T >
//   template< size_t Stride >
//   inline Propagator< L, T >::const_iterator< Stride > Propagator< L, T >::const_iterator< Stride >::operator++(int)
//   {
//     d_target += Stride;
//     return const_iterator(d_target - Stride);
//   }
// }
