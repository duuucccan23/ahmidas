#include <iostream>
#include <iomanip>

namespace QCD
{

  inline std::complex< double > tr(reducedTensor const &rTensor)
  {
    return rTensor.trace();
  }

  // private constructor
  inline reducedTensor::reducedTensor(Tensor const &fullTensor, Base::ColourIndex const colour_src, Base::ColourIndex const colour_snk)
  {
    size_t index = 12*colour_snk + colour_src;
    d_data[ 0] = fullTensor.d_data[index     ];
    d_data[ 1] = fullTensor.d_data[index +   3];
    d_data[ 2] = fullTensor.d_data[index +   6];
    d_data[ 3] = fullTensor.d_data[index +   9];
    d_data[ 4] = fullTensor.d_data[index +  36];
    d_data[ 5] = fullTensor.d_data[index +  39];
    d_data[ 6] = fullTensor.d_data[index +  42];
    d_data[ 7] = fullTensor.d_data[index +  45];
    d_data[ 8] = fullTensor.d_data[index +  72];
    d_data[ 9] = fullTensor.d_data[index +  75];
    d_data[10] = fullTensor.d_data[index +  78];
    d_data[11] = fullTensor.d_data[index +  81];
    d_data[12] = fullTensor.d_data[index + 108];
    d_data[13] = fullTensor.d_data[index + 111];
    d_data[14] = fullTensor.d_data[index + 114];
    d_data[15] = fullTensor.d_data[index + 117];
  }

  inline reducedTensor::reducedTensor()
  {
    //std::fill(d_data, d_data + 16, std::complex< double >(0.0, 0.0));
  }

  inline reducedTensor::reducedTensor(std::complex< double > const& value)
  {
    std::fill_n(d_data, 16, value);
  }


  inline reducedTensor::reducedTensor(reducedTensor const &other)
  {
    std::copy(other.d_data, other.d_data + 16, d_data);
  }


  inline std::complex< double > reducedTensor::trace() const
  {
    return d_data[0] + d_data[5] + d_data[10] + d_data[15];
  }

  inline reducedTensor reducedTensor::operator+(reducedTensor const &other) const
  {
    reducedTensor tmp;
    std::transform(d_data, d_data+16, other.d_data, tmp.d_data,
                   std::plus< std::complex< double > >());
    return tmp;
  }

  inline reducedTensor reducedTensor::operator-(reducedTensor const &other) const
  {
    reducedTensor tmp;
    std::transform(d_data, d_data+16, other.d_data, tmp.d_data,
                   std::minus< std::complex< double > >());
    return tmp;
  }

  inline void reducedTensor::operator+=(reducedTensor const &other)
  {
    std::transform(d_data, d_data+16, other.d_data, d_data,
                   std::plus< std::complex< double > >());
  }

  inline void reducedTensor::operator-=(reducedTensor const &other)
  {
    std::transform(d_data, d_data+16, other.d_data, d_data,
                   std::minus< std::complex< double > >());
  }

  inline reducedTensor &reducedTensor::operator=(reducedTensor const &rhs)
  {
    if (this != &rhs)
      std::copy(rhs.d_data, rhs.d_data + 16, d_data);
    return *this;
  }

  inline void reducedTensor::operator*=(reducedTensor const &rhs)
  {
    std::transform(d_data, d_data+16, rhs.d_data, d_data,
                   std::multiplies< std::complex< double > >());
  }

  inline reducedTensor reducedTensor::operator*(std::complex< double > const &factor) const
  {
    reducedTensor tmp;
    std::transform(d_data, d_data+16, tmp.d_data,
                   bind2nd(std::multiplies< std::complex< double > >(), factor));
    return tmp;
  }

  inline void reducedTensor::operator*=(std::complex< double > const &factor)
  {
    std::transform(d_data, d_data+16, d_data,
                   bind2nd(std::multiplies< std::complex< double > >(), factor));
  }

  inline std::complex< double > const &reducedTensor::operator()(Base::DiracIndex const Dirac_src,
                                                                 Base::DiracIndex const Dirac_snk) const
  {
    return d_data[Dirac_src + 4*Dirac_snk];
  }

  inline size_t reducedTensor::size() const
  {
    return 16;
  }

  inline std::ostream &operator<<(std::ostream &out, reducedTensor const &rTensor)
  {
    out << std::scientific << std::setprecision(3) << std::showpos
        << "[ " << rTensor.d_data[ 0].real() << "  " << rTensor.d_data[ 0].imag() << " * i   "
                << rTensor.d_data[ 1].real() << "  " << rTensor.d_data[ 2].imag() << " * i   "
                << rTensor.d_data[ 2].real() << "  " << rTensor.d_data[ 2].imag() << " * i   "
                << rTensor.d_data[ 3].real() << "  " << rTensor.d_data[ 3].imag() << " * i  ]"
                << std::endl
        << "[ " << rTensor.d_data[ 4].real() << "  " << rTensor.d_data[ 4].imag() << " * i   "
                << rTensor.d_data[ 5].real() << "  " << rTensor.d_data[ 5].imag() << " * i   "
                << rTensor.d_data[ 6].real() << "  " << rTensor.d_data[ 6].imag() << " * i   "
                << rTensor.d_data[ 7].real() << "  " << rTensor.d_data[ 7].imag() << " * i  ]"
                << std::endl
        << "[ " << rTensor.d_data[ 8].real() << "  " << rTensor.d_data[ 8].imag() << " * i   "
                << rTensor.d_data[ 9].real() << "  " << rTensor.d_data[ 9].imag() << " * i   "
                << rTensor.d_data[10].real() << "  " << rTensor.d_data[10].imag() << " * i   "
                << rTensor.d_data[11].real() << "  " << rTensor.d_data[11].imag() << " * i  ]"
                << std::endl
        << "[ " << rTensor.d_data[12].real() << "  " << rTensor.d_data[12].imag() << " * i   "
                << rTensor.d_data[13].real() << "  " << rTensor.d_data[13].imag() << " * i   "
                << rTensor.d_data[14].real() << "  " << rTensor.d_data[14].imag() << " * i   "
                << rTensor.d_data[15].real() << "  " << rTensor.d_data[15].imag() << " * i  ]"
                << std::endl;
    return out;
  }

}
