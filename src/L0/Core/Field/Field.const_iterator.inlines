namespace Core
{
  template< typename Element, size_t L, size_t T >
  inline Field< Element, L, T >::const_iterator::const_iterator(Field< Element, L, T > const &parent, size_t idx)
    : d_parent(parent), d_idx(idx)
  {}

  template< typename Element, size_t L, size_t T >
  inline Field< Element, L, T >::const_iterator::const_iterator(typename Field< Element, L, T >::iterator const &other)
    : d_parent(other.d_parent), d_idx(other.d_idx)
  {}

  template< typename Element, size_t L, size_t T >
  inline Field< Element, L, T >::const_iterator::const_iterator(typename Field< Element, L, T >::const_iterator const &other)
    : d_parent(other.d_parent), d_idx(other.d_idx)
  {}

  template< typename Element, size_t L, size_t T >
  inline bool Field< Element, L, T >::const_iterator::operator==(iterator const &other) const
  {
    return ((&d_parent == &(other.d_parent)) && (d_idx == other.d_idx));
  }

  template< typename Element, size_t L, size_t T >
  inline bool Field< Element, L, T >::const_iterator::operator==(const_iterator const &other) const
  {
    return ((&d_parent == &(other.d_parent)) && (d_idx == other.d_idx));
  }

  template< typename Element, size_t L, size_t T >
  inline bool Field< Element, L, T >::const_iterator::operator!=(iterator const &other) const
  {
    return ((&d_parent != &(other.d_parent)) || (d_idx != other.d_idx));
  }

  template< typename Element, size_t L, size_t T >
  inline bool Field< Element, L, T >::const_iterator::operator!=(const_iterator const &other) const
  {
    return ((&d_parent != &(other.d_parent)) ||  (d_idx != other.d_idx));
  }

  template< typename Element, size_t L, size_t T >
  inline Element const &Field< Element, L, T >::const_iterator::operator*() const
  {
    return d_parent.element(d_idx);
  }

  template< typename Element, size_t L, size_t T >
  inline Element const *Field< Element, L, T >::const_iterator::operator->() const
  {
    return &d_parent.element(d_idx);
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::const_iterator &Field< Element, L, T >::const_iterator::operator++()
  {
    ++d_idx;
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  inline typename Field< Element, L, T >::const_iterator &Field< Element, L, T >::const_iterator::operator--()
  {
    --d_idx;
    return *this;
  }
}
