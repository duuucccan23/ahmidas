namespace Core
{


  inline Propagator::Propagator(size_t L, size_t T, bool alloc)
    : d_references(new size_t(1))
  {

    if(alloc)
    {
      d_components = new Field< QCD::Tensor >(L, T);
    }
  }



  inline Propagator::Propagator(Propagator const &other)
    : d_references(other.d_references),
      d_components(other.d_components)
  {
    *d_references += 1;
  }


  inline Propagator::~Propagator()
  {
    destroy();
  }


  inline Propagator &Propagator::revert()
  {
    Dirac::Gamma<5> gamma5 = Dirac::Gamma<5>();
    isolate();
    Propagator::iterator it = begin();
    while(it != end())
    {
      QCD::Tensor tmp((*it).dagger());
      tmp *= gamma5;
      (*it) = gamma5*tmp;
      ++it;
    }
    return *this;
  }

  inline Propagator &Propagator::dagger()
  {
    isolate();
    Propagator::iterator it = begin();
    while(it != end())
    {
      (*it) = QCD::Tensor((*it).dagger());
      ++it;
    }
    return *this;
  }

  inline double Propagator::diff(Propagator const& other) const
  {
    if (d_components == other.d_components)
      return 0.0;
    if (L() != other.L() || T() != other.T())
      return -1.0;

    double diff(0.0);

    Propagator::const_iterator it1 = begin();
    Propagator::const_iterator it2 = other.begin();

    while(it1 != end())
    {
      diff += abs((*it1).diff(*it2));
      ++it2;
      ++it1;
    }
    diff /= (double(d_components->volume())*double(size()));
    return diff;
  }

  inline void Propagator::setToRandom()
  {
    isolate();
    Propagator::iterator it = begin();
    while(it != end())
    {
      (*it).setToRandom();
      ++it;
    }
  }

  inline Propagator::iterator Propagator::begin()
  {
    isolate();
    return iterator(*this, 0);
  }

  inline Propagator::const_iterator Propagator::begin() const
  {
    return const_iterator(*this, 0);
  }

  inline Propagator::iterator Propagator::end()
  {
    isolate();
    return iterator(*this, d_components->size());
  }

  inline Propagator::const_iterator Propagator::end() const
  {
    return const_iterator(*this, d_components->size());
  }

  inline size_t const Propagator::size() const
  {
    return d_size;
  }

  inline size_t const Propagator::L() const
  {
    return d_components->L();
  }

  inline size_t const Propagator::T() const
  {
    return d_components->T();
  }



}
