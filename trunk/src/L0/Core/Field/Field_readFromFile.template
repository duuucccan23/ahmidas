namespace Core
{ 
  template< typename Element, size_t T, size_t L >
  template< typename Precision >  
  void Core::Field< Element, T, L >::readFromFile(char const* fileName, char const* fileType)
  {
    size_t written = 0; //Number of locally written elements
    size_t const elementSize = sizeof(Element) / sizeof(double); // We assume Element is natively a collection of doubles
    
    // We process all input as chars, to avoid any unpleasantness with floating point registers.
    
    if (d_grid.rank()) // Prepare to receive
    {
      char *fileBuffer = new char[elementSize * sizeof(Precision) * d_grid.contiguousBlock()];
      for (size_t ctr = 0; ctr < (d_grid.localVolume() / d_grid.contiguousBlock()); ++ctr, written += d_grid.contiguousBlock())
      {
        d_grid.grid().Recv(fileBuffer, d_grid.contiguousBlock() * elementSize * sizeof(Precision), MPI::BYTE, 0, TAG_FILE_DISTRIBUTION);
        if (!d_grid.bigEndian())
          swapEndian(d_field + written, d_field + written + d_grid.contiguousBlock() , sizeof(Precision));
	std::copy(reinterpret_cast< Precision* >(fileBuffer), 
		  reinterpret_cast< Precision* >(fileBuffer) + (d_grid.contiguousBlock() * elementSize),
		   reinterpret_cast< double* >(d_field + written));
      }
      delete[] fileBuffer;
      return;
    }

    // At this point, we know we're node 0
    Lime::Reader confFile(fileName, fileType);

    // Check the content of this file for a simple sanity condition -- is there enough data to begin with.
    if (d_grid.totalVolume() * elementSize * sizeof(Precision) != confFile.size())
    {
      std::cerr << "Content of " << fileName << " is of inappropriate size.\nAborting." << std::endl;
      MPI::COMM_WORLD.Abort(EIO);
    }
    
    char *fileBuffer = new char[elementSize * sizeof(Precision) * d_grid.contiguousBlock()];

    size_t nBlocks = d_grid.totalVolume() / d_grid.contiguousBlock();
    for (size_t ctr = 0; ctr < nBlocks; ++ctr)
    {
      confFile.read(fileBuffer, d_grid.contiguousBlock() * elementSize * sizeof(Precision));
      if (confFile.fail())
      {
	std::cerr << "Unexpected error while reading file " << fileName << ".\nAborting." << std::endl;
        MPI::COMM_WORLD.Abort(EIO);
      }

      size_t destination = d_grid.rank(ctr * d_grid.contiguousBlock());
      if (!destination) // This block of data should be stored locally
      {
        if (!d_grid.bigEndian())
          swapEndian(fileBuffer, fileBuffer + d_grid.contiguousBlock(), sizeof(Precision));	
        std::copy(reinterpret_cast< Precision* >(fileBuffer), 
		  reinterpret_cast< Precision* >(fileBuffer) + (d_grid.contiguousBlock() * elementSize), 
		  reinterpret_cast< double* >(d_field + written));
        written += d_grid.contiguousBlock();
        continue;
      }
      d_grid.grid().Send(fileBuffer, d_grid.contiguousBlock() * elementSize * sizeof(Precision), MPI::BYTE, destination, TAG_FILE_DISTRIBUTION);
    }
    delete[] fileBuffer;
  }
}
