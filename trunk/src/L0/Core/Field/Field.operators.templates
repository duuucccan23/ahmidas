namespace Core
{
  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::leftMultiply(Scalar const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx].leftMultiply(other);
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::leftMultiply(Field< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx].leftMultiply(other[shiftIdxToZero(idx)]);
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::leftMultiply(hcField< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx].leftMultiply(other[shiftIdxToZero(idx)].dagger();
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::leftMultiply(Component< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx].leftMultiply(other[shiftIdxToZero(idx)]);
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::leftMultiply(hcComponent< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx].leftMultiply(other[shiftIdxToZero(idx)].dagger());
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::rightMultiply(Scalar const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx].rightMultiply(other);
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::rightMultiply(Field< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx].rightMultiply(other[shiftIdxToZero(idx)]);
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::rightMultiply(hcField< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx].rightMultiply(other[shiftIdxToZero(idx)].dagger();
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::rightMultiply(Component< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx].rightMultiply(other[shiftIdxToZero(idx)]);
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::rightMultiply(hcComponent< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx].rightMultiply(other[shiftIdxToZero(idx)].dagger());
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator+=(Scalar const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] += other;
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator+=(Field< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] += other[shiftIdxToZero(idx)];
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator+=(hcField< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] += other[shiftIdxToZero(idx)].dagger();
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::operator+=(Component< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx] += other[shiftIdxToZero(idx)];
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::operator+=(hcComponent< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx] += other[shiftIdxToZero(idx)].dagger();
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator-=(Scalar const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] -= other;
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator-=(Field< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] -= other[shiftIdxToZero(idx)];
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator-=(hcField< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] -= other[shiftIdxToZero(idx)].dagger();
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::operator-=(Component< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx] -= other[shiftIdxToZero(idx)];
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::operator-=(hcComponent< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx] -= other[shiftIdxToZero(idx)].dagger();
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator*=(Scalar const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] *= other;
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator*=(Field< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] *= other[shiftIdxToZero(idx)];
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator*=(hcField< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] *= other[shiftIdxToZero(idx)].dagger();
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::operator*=(Component< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx] *= other[shiftIdxToZero(idx)];
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::operator*=(hcComponent< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx] *= other[shiftIdxToZero(idx)].dagger();
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator/=(Scalar const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_grid.localVolume(); ++idx)
      d_field[idx] /= other;
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator/=(Field< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] /= other[shiftIdxToZero(idx)];
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar >
  Field< Element, L, T > &Field< Element, L, T >::operator/=(hcField< Scalar, L, T > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx)
      d_field[idx] /= other[shiftIdxToZero(idx)].dagger();
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::operator/=(Component< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx] /= other[shiftIdxToZero(idx)];
    return *this;
  }

  template< typename Element, size_t L, size_t T >
  template< typename Scalar, typename Atom >
  Field< Element, L, T > &Field< Element, L, T >::operator/=(hcComponent< Scalar, L, T, Atom > const &other)
  {
    isolate();
    for (size_t idx = 0; idx < d_unifold.localVolume(); ++idx )
      d_field[idx] /= other[shiftIdxToZero(idx)].dagger();
    return *this;
  }
}
