namespace QCD
{

  inline std::complex< double > tr(Tensor const &tensor)
  {
    return tensor.trace();
  }

  inline std::complex< double > tr(hcTensor const &tensor)
  {
    return std::conj(tensor.dagger().trace());
  }

  inline Tensor::Tensor()
  {
    std::fill_n(d_data, 144, std::complex< double >(0.0, 0.0));
  }

  inline Tensor::Tensor(Tensor const &other)
  {
    std::copy(other.d_data, other.d_data + 144, d_data);
  }

  inline Tensor::Tensor(Spinor *data[12])
  {
    for (size_t ic=0; ic < 12; ic++)
      std::copy(reinterpret_cast< std::complex< double >* >(data[ic]),
                reinterpret_cast< std::complex< double >* >(data[ic]) + 12,
                d_data + ic*12);
  }

  inline Tensor::Tensor(Dirac::Matrix const * const data[9])
  {
    static size_t const color_table[9] = {
      3*Base::col_RED   + Base::col_RED, 3*Base::col_RED   + Base::col_GREEN, 3*Base::col_RED   + Base::col_BLUE,
      3*Base::col_GREEN + Base::col_RED, 3*Base::col_GREEN + Base::col_GREEN, 3*Base::col_GREEN + Base::col_BLUE,
      3*Base::col_BLUE  + Base::col_RED, 3*Base::col_BLUE  + Base::col_GREEN, 3*Base::col_BLUE  + Base::col_BLUE};
    static size_t const tensor_color_table[9] = {
      12*Base::col_RED   + Base::col_RED, 12*Base::col_RED   + Base::col_GREEN, 12*Base::col_RED   + Base::col_BLUE,
      12*Base::col_GREEN + Base::col_RED, 12*Base::col_GREEN + Base::col_GREEN, 12*Base::col_GREEN + Base::col_BLUE,
      12*Base::col_BLUE  + Base::col_RED, 12*Base::col_BLUE  + Base::col_GREEN, 12*Base::col_BLUE  + Base::col_BLUE};

    std::complex< double >* data_ptr(NULL);
    std::complex< double > const * rT_ptr(NULL);

    for (size_t idx=0; idx<9; idx++)
    {
      data_ptr = d_data + tensor_color_table[idx];
      rT_ptr = &((*(data[color_table[idx]]))[0]);

      data_ptr[  0] = rT_ptr[ 0];
      data_ptr[  3] = rT_ptr[ 1];
      data_ptr[  6] = rT_ptr[ 2];
      data_ptr[  9] = rT_ptr[ 3];
      data_ptr[ 36] = rT_ptr[ 4];
      data_ptr[ 39] = rT_ptr[ 5];
      data_ptr[ 42] = rT_ptr[ 6];
      data_ptr[ 45] = rT_ptr[ 7];
      data_ptr[ 72] = rT_ptr[ 8];
      data_ptr[ 75] = rT_ptr[ 9];
      data_ptr[ 78] = rT_ptr[10];
      data_ptr[ 81] = rT_ptr[11];
      data_ptr[108] = rT_ptr[12];
      data_ptr[111] = rT_ptr[13];
      data_ptr[114] = rT_ptr[14];
      data_ptr[117] = rT_ptr[15];
    }
  }


  inline Tensor const &Tensor::identity()
  {
    return s_identity;
  }


  inline void Tensor::leftMultiplySpinColorDilutedConj(Tensor const& xi)
  {
    std::transform(d_data      , d_data +  12, d_data,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[  0])));
    std::transform(d_data +  12, d_data +  24, d_data +  12,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[ 13])));
    std::transform(d_data +  24, d_data +  36, d_data +  24,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[ 26])));
    std::transform(d_data +  36, d_data +  48, d_data +  36,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[ 39])));
    std::transform(d_data +  48, d_data +  60, d_data +  48,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[ 52])));
    std::transform(d_data +  60, d_data +  72, d_data +  60,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[ 65])));
    std::transform(d_data +  72, d_data +  84, d_data +  72,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[ 78])));
    std::transform(d_data +  84, d_data +  96, d_data +  84,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[ 91])));
    std::transform(d_data +  96, d_data + 108, d_data +  96,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[104])));
    std::transform(d_data + 108, d_data + 120, d_data + 108,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[117])));
    std::transform(d_data + 120, d_data + 132, d_data + 120,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[130])));
    std::transform(d_data + 132, d_data + 144, d_data + 132,
                    std::bind1st(std::multiplies< std::complex< double > >(), conj(xi.d_data[143])));
  }



  inline hcTensor Tensor::dagger() const
  {
    return hcTensor(*this);
  }

  inline Tensor Tensor::spinDilutedDagger() const
  {
    std::complex<double> out[144];
    
    for (size_t sourceSpin = 0; sourceSpin < 4; ++sourceSpin)
      for (size_t sinkSpin = 0; sinkSpin < 4; ++sinkSpin)
        for (size_t sinkColor = 0; sinkColor < 3; ++sinkColor)
          out[36*sourceSpin + 3*sinkSpin + sinkColor] = std::conj(d_data[36*sinkSpin + 3*sourceSpin + sinkColor]);

    return QCD::Tensor(out);
  }

  inline void Tensor::undilutedConjugate()
  {
    for(size_t i=0; i < 12; i++)
      d_data[i] = conj(d_data[i]);
  }

  inline void Tensor::spinDilutedConjugate()
  {
    for (size_t sourceSpin = 0; sourceSpin < 4; ++sourceSpin)
      for (size_t sinkSpin = 0; sinkSpin < 4; ++sinkSpin)
        for (size_t sinkColor = 0; sinkColor < 3; ++sinkColor)
          d_data[36*sourceSpin + 3*sinkSpin + sinkColor] = std::conj(d_data[36*sourceSpin + 3*sinkSpin + sinkColor]);
  }

  inline void Tensor::conjugate()
  {
    for(size_t i=0; i < 144; i++)
      d_data[i] = conj(d_data[i]);
    // there must be a better way to do this using std::transform (the following example does not work):
    // std::transform(d_data, d_data + 144, d_data, std::ptr_fun(&conj));
  }


  inline void Tensor::transposeDirac()
  {
    // only swap non-diagonal SU3 (colour) vectors
    std::swap_ranges(d_data +   3, d_data +   6, d_data +  36);
    std::swap_ranges(d_data +   6, d_data +   9, d_data +  72);
    std::swap_ranges(d_data +   9, d_data +  12, d_data + 108);

    std::swap_ranges(d_data +  15, d_data +  18, d_data +  48);
    std::swap_ranges(d_data +  18, d_data +  21, d_data +  84);
    std::swap_ranges(d_data +  21, d_data +  24, d_data + 120);

    std::swap_ranges(d_data +  27, d_data +  30, d_data +  60);
    std::swap_ranges(d_data +  30, d_data +  33, d_data +  96);
    std::swap_ranges(d_data +  33, d_data +  36, d_data + 132);

    std::swap_ranges(d_data +  42, d_data +  45, d_data +  75);
    std::swap_ranges(d_data +  45, d_data +  48, d_data + 111);

    std::swap_ranges(d_data +  54, d_data +  57, d_data +  87);
    std::swap_ranges(d_data +  57, d_data +  60, d_data + 123);

    std::swap_ranges(d_data +  66, d_data +  69, d_data +  99);
    std::swap_ranges(d_data +  69, d_data +  72, d_data + 135);

    std::swap_ranges(d_data +  81, d_data +  84, d_data + 114);

    std::swap_ranges(d_data +  93, d_data +  96, d_data + 126);

    std::swap_ranges(d_data + 105, d_data + 108, d_data + 138);
  }

  inline void Tensor::transposeFull()
  {
    // only swap non-diagonal elements
    std::swap(*(d_data +   1), *(d_data +  12));
    std::swap(*(d_data +   2), *(d_data +  24));
    std::swap(*(d_data +   3), *(d_data +  36));
    std::swap(*(d_data +   4), *(d_data +  48));
    std::swap(*(d_data +   5), *(d_data +  60));
    std::swap(*(d_data +   6), *(d_data +  72));
    std::swap(*(d_data +   7), *(d_data +  84));
    std::swap(*(d_data +   8), *(d_data +  96));
    std::swap(*(d_data +   9), *(d_data + 108));
    std::swap(*(d_data +  10), *(d_data + 120));
    std::swap(*(d_data +  11), *(d_data + 132));
    // ---
    std::swap(*(d_data +  14), *(d_data +  25));
    std::swap(*(d_data +  15), *(d_data +  37));
    std::swap(*(d_data +  16), *(d_data +  49));
    std::swap(*(d_data +  17), *(d_data +  61));
    std::swap(*(d_data +  18), *(d_data +  73));
    std::swap(*(d_data +  19), *(d_data +  85));
    std::swap(*(d_data +  20), *(d_data +  97));
    std::swap(*(d_data +  21), *(d_data + 109));
    std::swap(*(d_data +  22), *(d_data + 121));
    std::swap(*(d_data +  23), *(d_data + 133));
    // ---
    std::swap(*(d_data +  27), *(d_data +  38));
    std::swap(*(d_data +  28), *(d_data +  50));
    std::swap(*(d_data +  29), *(d_data +  62));
    std::swap(*(d_data +  30), *(d_data +  74));
    std::swap(*(d_data +  31), *(d_data +  86));
    std::swap(*(d_data +  32), *(d_data +  98));
    std::swap(*(d_data +  33), *(d_data + 110));
    std::swap(*(d_data +  34), *(d_data + 122));
    std::swap(*(d_data +  35), *(d_data + 134));
    // ---
    std::swap(*(d_data +  40), *(d_data +  51));
    std::swap(*(d_data +  41), *(d_data +  63));
    std::swap(*(d_data +  42), *(d_data +  75));
    std::swap(*(d_data +  43), *(d_data +  87));
    std::swap(*(d_data +  44), *(d_data +  99));
    std::swap(*(d_data +  45), *(d_data + 111));
    std::swap(*(d_data +  46), *(d_data + 123));
    std::swap(*(d_data +  47), *(d_data + 135));
    // ---
    std::swap(*(d_data +  53), *(d_data +  64));
    std::swap(*(d_data +  54), *(d_data +  76));
    std::swap(*(d_data +  55), *(d_data +  88));
    std::swap(*(d_data +  56), *(d_data + 100));
    std::swap(*(d_data +  57), *(d_data + 112));
    std::swap(*(d_data +  58), *(d_data + 124));
    std::swap(*(d_data +  59), *(d_data + 136));
    // ---
    std::swap(*(d_data +  66), *(d_data +  77));
    std::swap(*(d_data +  67), *(d_data +  89));
    std::swap(*(d_data +  68), *(d_data + 101));
    std::swap(*(d_data +  69), *(d_data + 113));
    std::swap(*(d_data +  70), *(d_data + 125));
    std::swap(*(d_data +  71), *(d_data + 137));
    // ---
    std::swap(*(d_data +  79), *(d_data +  90));
    std::swap(*(d_data +  80), *(d_data + 102));
    std::swap(*(d_data +  81), *(d_data + 114));
    std::swap(*(d_data +  82), *(d_data + 126));
    std::swap(*(d_data +  83), *(d_data + 138));
    // ---
    std::swap(*(d_data +  92), *(d_data + 103));
    std::swap(*(d_data +  93), *(d_data + 115));
    std::swap(*(d_data +  94), *(d_data + 127));
    std::swap(*(d_data +  95), *(d_data + 139));
    // ---
    std::swap(*(d_data + 105), *(d_data + 116));
    std::swap(*(d_data + 106), *(d_data + 128));
    std::swap(*(d_data + 107), *(d_data + 140));
    // ---
    std::swap(*(d_data + 118), *(d_data + 129));
    std::swap(*(d_data + 119), *(d_data + 141));
    // ---
    std::swap(*(d_data + 131), *(d_data + 142));
  }

  inline void Tensor::spinDilutedTransposeFull()
  {
    for (size_t sourceSpin = 0; sourceSpin < 4; ++sourceSpin)
      for (size_t sinkSpin = 0; sinkSpin < 4; ++sinkSpin)
	if(sourceSpin!=sinkSpin)
          for (size_t sinkColor = 0; sinkColor < 3; ++sinkColor)
            d_data[36*sourceSpin + 3*sinkSpin + sinkColor] = d_data[36*sinkSpin + 3*sourceSpin + sinkColor];
  }

  inline double Tensor::norm() const
  {
    double result(0);
    for (size_t idx=0; idx<144; idx++)
      result += abs(d_data[idx]);
    return result;
  }

  inline double Tensor::normq() const
  {
    double result(0);
    for (size_t idx=0; idx<144; idx++)
    {
      double re=d_data[idx].real();
      double im=d_data[idx].imag();
      result += re*re+im*im;
    }
    return result;
  }

  inline std::complex< double > Tensor::trace() const
  {
    return d_data[0] + d_data[13] + d_data[26] + d_data[39] + d_data[52] + d_data[65]
           + d_data[78] + d_data[91] + d_data[104] + d_data[117] + d_data[130] + d_data[143];
  }

  inline size_t Tensor::size() const
  {
    return 144;
  }

  inline std::complex< double > Tensor::diff(Tensor const &other) const
  {
    std::complex< double > initial(0.0, 0.0);
    std::complex< double > final = std::accumulate(d_data, d_data+144, initial);
    final -= std::accumulate(other.d_data, other.d_data+144, initial);
    return final;
  }

  inline void Tensor::setToRandom()
  {
    std::generate_n(reinterpret_cast< double* >(d_data), 288, Base::Random::fastSymmetric);
  }



  inline Tensor::iterator Tensor::begin(Base::ColourIndex const idx, TensorColourStride const stride)
  {
    return iterator(*this, stride, 0);
  }


  inline Tensor::iterator Tensor::end(Base::ColourIndex const idx, TensorColourStride const stride)
  {
    return iterator(*this, stride, size());
  }


  inline Tensor::iterator Tensor::begin(Base::DiracIndex const idx, TensorDiracStride const stride)
  {
    return iterator(*this, stride, 0);
  }


  inline Tensor::iterator Tensor::end(Base::DiracIndex const idx, TensorDiracStride const stride)
  {
    return iterator(*this, stride ,size());
  }

  inline std::ostream &operator<<(std::ostream &out, Tensor const &tensor)
  {
    const size_t prec(out.precision());
    out <<  Spinor(tensor.d_data)       << Spinor(tensor.d_data +  12) << Spinor(tensor.d_data +  24);
    out <<  Spinor(tensor.d_data +  36) << Spinor(tensor.d_data +  48) << Spinor(tensor.d_data +  60);
    out <<  Spinor(tensor.d_data +  72) << Spinor(tensor.d_data +  84) << Spinor(tensor.d_data +  96);
    out <<  Spinor(tensor.d_data + 108) << Spinor(tensor.d_data + 120) << Spinor(tensor.d_data + 132) << std::endl;
    out.precision(prec);
    return out;
  }



  /* ############################################################################################## */
  /* ############################################################################################## */
  /* ############################################################################################## */


inline void Tensor::left_multiply_proton()
  {

// this would be the corresponding Gamma structure
//   template< >
//   size_t const Gamma< 245 >::s_perm[4] = {1, 0, 3, 2};
//   template< >
//   std::complex< double > const Gamma< 245 >::s_sign[4] = {1, -1, 1, -1};

    std::swap_ranges(d_data,      d_data +  36, d_data +  36);
    std::swap_ranges(d_data + 72, d_data + 108, d_data + 108);
    // actually we have -Gamma2*Gamma0*Gamma5, which is considered below
    std::transform(d_data,       d_data +  36, d_data,
                   std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, -1)));
    std::transform(d_data +  36, d_data +  72, d_data +  36,
                   std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, +1)));
    std::transform(d_data +  72, d_data + 108, d_data +  72,
                   std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, -1)));
    std::transform(d_data + 108, d_data + 144, d_data + 108,
                   std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, +1)));
  }


  inline void Tensor::right_multiply_proton()
  {
    std::complex< double > *spinor_data = NULL;
    // personal note: if this turns out to work, don't use spinor interface but d_data directly
    for(size_t Idx=0; Idx<12; Idx++)
    {
      spinor_data = d_data + Idx*12;
      std::swap_ranges(spinor_data    , spinor_data + 3, spinor_data + 3);
      std::swap_ranges(spinor_data + 6, spinor_data + 9, spinor_data + 9);
      std::transform(spinor_data,     spinor_data +  3, spinor_data,
                     std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, +1)));
      std::transform(spinor_data + 3, spinor_data +  6, spinor_data + 3,
                     std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, -1)));
      std::transform(spinor_data + 6, spinor_data +  9, spinor_data + 6,
                     std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, +1)));
      std::transform(spinor_data + 9, spinor_data + 12, spinor_data + 9,
                     std::bind1st(std::multiplies< std::complex< double > >(), std::complex< double >(0, -1)));
    }
  }

}
