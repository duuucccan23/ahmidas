template< typename Element, size_t L, size_t T >
Core::Field< Element, L, T > Tool::IO::loadILDG(std::string const &filename)
{
//  static_assert(sizeof(uint32_t) == sizeof(float), "Sizes of uint32_t and float differ.");
//  static_assert(sizeof(uint64_t) == sizeof(double), "Sizes of uint64_t and double differ.");

  Lime::Reader reader(filename);
  ILDGinfo info(reader);

  reader.retrieveRecord(reader.findRecord("ildg-binary-data"));
  assert(reader.good());

  Core::Field< Element, L, T > result;
  Element *dataPtr = result.raw();

  if (info.precision.compare("64") == 0)
  {
    reader.read(dataPtr, result.size());
    if (!Base::bigEndian)
      Base::swapEndian(dataPtr, dataPtr + result.size(), sizeof(double));
    return result;
  }

  size_t const elSize = sizeof(Element) / sizeof(double);
  uint32_t elem32[elSize];

  for (size_t ctr = 0; ctr < result.size(); ++ctr, ++dataPtr)
  {
    reader.read(elem32, elSize);
    if (!Base::bigEndian)
      Base::swapEndian(elem32, elem32 + elSize);
    std::copy(reinterpret_cast< float* >(elem32), reinterpret_cast< float* >(elem32) + elSize,
              reinterpret_cast< double* >(dataPtr));
  }
  return result;
}
