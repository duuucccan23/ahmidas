inline Propagator &Propagator::operator=(Propagator const &rhs)
{
  std::cout << "calling assignment operator of class Propagator" << std::endl;
  if (this != &rhs)
  {
    destroy();

    d_references = rhs.d_references;
    d_components = rhs.d_components;
    *d_references += 1;
    d_components->refCountUp();
  }
  return (*this);
}

template< size_t Index >
void Propagator::operator*=(Dirac::Gamma< Index > const &gamma)
{
  isolate();
  Propagator::iterator I(begin());
  while(I!=end())
  {
    (*I) *= gamma;
    ++I;
  }
}

template< size_t Index >
Propagator operator*(Dirac::Gamma< Index > const &gamma, Propagator const &p)
{
  Propagator tmp(p.L(), p.T());
  Propagator::const_iterator before(p.begin());
  Propagator::iterator after(tmp.begin());
  while(before != p.end())
  {
    (*after) = gamma*(*before);
    ++before;
    ++after;
  }
  return tmp;
}

template< size_t Index >
inline Propagator Propagator::operator*(Dirac::Gamma< Index > const &gamma) const
{
  Propagator tmp(*this);
  tmp*=gamma;
  return tmp;
}
